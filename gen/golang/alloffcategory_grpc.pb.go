// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlloffCategoryClient is the client API for AlloffCategory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlloffCategoryClient interface {
	ListAlloffCategory(ctx context.Context, in *ListAlloffCategoryRequest, opts ...grpc.CallOption) (*ListAlloffCategoryResponse, error)
}

type alloffCategoryClient struct {
	cc grpc.ClientConnInterface
}

func NewAlloffCategoryClient(cc grpc.ClientConnInterface) AlloffCategoryClient {
	return &alloffCategoryClient{cc}
}

func (c *alloffCategoryClient) ListAlloffCategory(ctx context.Context, in *ListAlloffCategoryRequest, opts ...grpc.CallOption) (*ListAlloffCategoryResponse, error) {
	out := new(ListAlloffCategoryResponse)
	err := c.cc.Invoke(ctx, "/protos.AlloffCategory/ListAlloffCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlloffCategoryServer is the server API for AlloffCategory service.
// All implementations must embed UnimplementedAlloffCategoryServer
// for forward compatibility
type AlloffCategoryServer interface {
	ListAlloffCategory(context.Context, *ListAlloffCategoryRequest) (*ListAlloffCategoryResponse, error)
	mustEmbedUnimplementedAlloffCategoryServer()
}

// UnimplementedAlloffCategoryServer must be embedded to have forward compatible implementations.
type UnimplementedAlloffCategoryServer struct {
}

func (UnimplementedAlloffCategoryServer) ListAlloffCategory(context.Context, *ListAlloffCategoryRequest) (*ListAlloffCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlloffCategory not implemented")
}
func (UnimplementedAlloffCategoryServer) mustEmbedUnimplementedAlloffCategoryServer() {}

// UnsafeAlloffCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlloffCategoryServer will
// result in compilation errors.
type UnsafeAlloffCategoryServer interface {
	mustEmbedUnimplementedAlloffCategoryServer()
}

func RegisterAlloffCategoryServer(s grpc.ServiceRegistrar, srv AlloffCategoryServer) {
	s.RegisterService(&AlloffCategory_ServiceDesc, srv)
}

func _AlloffCategory_ListAlloffCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlloffCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlloffCategoryServer).ListAlloffCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AlloffCategory/ListAlloffCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlloffCategoryServer).ListAlloffCategory(ctx, req.(*ListAlloffCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlloffCategory_ServiceDesc is the grpc.ServiceDesc for AlloffCategory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlloffCategory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AlloffCategory",
	HandlerType: (*AlloffCategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlloffCategory",
			Handler:    _AlloffCategory_ListAlloffCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alloffcategory.proto",
}
