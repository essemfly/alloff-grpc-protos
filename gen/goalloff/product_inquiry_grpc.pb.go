// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductInquiryControllerClient is the client API for ProductInquiryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductInquiryControllerClient interface {
	List(ctx context.Context, in *ProductInquiryListRequest, opts ...grpc.CallOption) (*ProductInquiryListResponse, error)
	Retrieve(ctx context.Context, in *ProductInquiryRetrieveRequest, opts ...grpc.CallOption) (*ProductInquiry, error)
	CreateReply(ctx context.Context, in *ProductInquiryReplyCreateRequest, opts ...grpc.CallOption) (*ProductInquiry, error)
	DeleteReply(ctx context.Context, in *ProductInquiryReplyDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productInquiryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductInquiryControllerClient(cc grpc.ClientConnInterface) ProductInquiryControllerClient {
	return &productInquiryControllerClient{cc}
}

func (c *productInquiryControllerClient) List(ctx context.Context, in *ProductInquiryListRequest, opts ...grpc.CallOption) (*ProductInquiryListResponse, error) {
	out := new(ProductInquiryListResponse)
	err := c.cc.Invoke(ctx, "/productinquiry.ProductInquiryController/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInquiryControllerClient) Retrieve(ctx context.Context, in *ProductInquiryRetrieveRequest, opts ...grpc.CallOption) (*ProductInquiry, error) {
	out := new(ProductInquiry)
	err := c.cc.Invoke(ctx, "/productinquiry.ProductInquiryController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInquiryControllerClient) CreateReply(ctx context.Context, in *ProductInquiryReplyCreateRequest, opts ...grpc.CallOption) (*ProductInquiry, error) {
	out := new(ProductInquiry)
	err := c.cc.Invoke(ctx, "/productinquiry.ProductInquiryController/CreateReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInquiryControllerClient) DeleteReply(ctx context.Context, in *ProductInquiryReplyDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/productinquiry.ProductInquiryController/DeleteReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductInquiryControllerServer is the server API for ProductInquiryController service.
// All implementations must embed UnimplementedProductInquiryControllerServer
// for forward compatibility
type ProductInquiryControllerServer interface {
	List(context.Context, *ProductInquiryListRequest) (*ProductInquiryListResponse, error)
	Retrieve(context.Context, *ProductInquiryRetrieveRequest) (*ProductInquiry, error)
	CreateReply(context.Context, *ProductInquiryReplyCreateRequest) (*ProductInquiry, error)
	DeleteReply(context.Context, *ProductInquiryReplyDestroyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductInquiryControllerServer()
}

// UnimplementedProductInquiryControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProductInquiryControllerServer struct {
}

func (UnimplementedProductInquiryControllerServer) List(context.Context, *ProductInquiryListRequest) (*ProductInquiryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductInquiryControllerServer) Retrieve(context.Context, *ProductInquiryRetrieveRequest) (*ProductInquiry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedProductInquiryControllerServer) CreateReply(context.Context, *ProductInquiryReplyCreateRequest) (*ProductInquiry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedProductInquiryControllerServer) DeleteReply(context.Context, *ProductInquiryReplyDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReply not implemented")
}
func (UnimplementedProductInquiryControllerServer) mustEmbedUnimplementedProductInquiryControllerServer() {
}

// UnsafeProductInquiryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductInquiryControllerServer will
// result in compilation errors.
type UnsafeProductInquiryControllerServer interface {
	mustEmbedUnimplementedProductInquiryControllerServer()
}

func RegisterProductInquiryControllerServer(s grpc.ServiceRegistrar, srv ProductInquiryControllerServer) {
	s.RegisterService(&ProductInquiryController_ServiceDesc, srv)
}

func _ProductInquiryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInquiryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInquiryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productinquiry.ProductInquiryController/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInquiryControllerServer).List(ctx, req.(*ProductInquiryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInquiryController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInquiryRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInquiryControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productinquiry.ProductInquiryController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInquiryControllerServer).Retrieve(ctx, req.(*ProductInquiryRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInquiryController_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInquiryReplyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInquiryControllerServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productinquiry.ProductInquiryController/CreateReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInquiryControllerServer).CreateReply(ctx, req.(*ProductInquiryReplyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInquiryController_DeleteReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInquiryReplyDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInquiryControllerServer).DeleteReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productinquiry.ProductInquiryController/DeleteReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInquiryControllerServer).DeleteReply(ctx, req.(*ProductInquiryReplyDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductInquiryController_ServiceDesc is the grpc.ServiceDesc for ProductInquiryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductInquiryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productinquiry.ProductInquiryController",
	HandlerType: (*ProductInquiryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductInquiryController_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ProductInquiryController_Retrieve_Handler,
		},
		{
			MethodName: "CreateReply",
			Handler:    _ProductInquiryController_CreateReply_Handler,
		},
		{
			MethodName: "DeleteReply",
			Handler:    _ProductInquiryController_DeleteReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_inquiry.proto",
}
