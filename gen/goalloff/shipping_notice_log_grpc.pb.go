// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingNoticeLogControllerClient is the client API for ShippingNoticeLogController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingNoticeLogControllerClient interface {
	List(ctx context.Context, in *ShippingNoticeLogListRequest, opts ...grpc.CallOption) (ShippingNoticeLogController_ListClient, error)
	Create(ctx context.Context, in *ShippingNoticeLog, opts ...grpc.CallOption) (*ShippingNoticeLog, error)
	Retrieve(ctx context.Context, in *ShippingNoticeLogRetrieveRequest, opts ...grpc.CallOption) (*ShippingNoticeLog, error)
	Update(ctx context.Context, in *ShippingNoticeLog, opts ...grpc.CallOption) (*ShippingNoticeLog, error)
	Destroy(ctx context.Context, in *ShippingNoticeLog, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shippingNoticeLogControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingNoticeLogControllerClient(cc grpc.ClientConnInterface) ShippingNoticeLogControllerClient {
	return &shippingNoticeLogControllerClient{cc}
}

func (c *shippingNoticeLogControllerClient) List(ctx context.Context, in *ShippingNoticeLogListRequest, opts ...grpc.CallOption) (ShippingNoticeLogController_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShippingNoticeLogController_ServiceDesc.Streams[0], "/shippingnoticelog.ShippingNoticeLogController/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &shippingNoticeLogControllerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShippingNoticeLogController_ListClient interface {
	Recv() (*ShippingNoticeLog, error)
	grpc.ClientStream
}

type shippingNoticeLogControllerListClient struct {
	grpc.ClientStream
}

func (x *shippingNoticeLogControllerListClient) Recv() (*ShippingNoticeLog, error) {
	m := new(ShippingNoticeLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shippingNoticeLogControllerClient) Create(ctx context.Context, in *ShippingNoticeLog, opts ...grpc.CallOption) (*ShippingNoticeLog, error) {
	out := new(ShippingNoticeLog)
	err := c.cc.Invoke(ctx, "/shippingnoticelog.ShippingNoticeLogController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeLogControllerClient) Retrieve(ctx context.Context, in *ShippingNoticeLogRetrieveRequest, opts ...grpc.CallOption) (*ShippingNoticeLog, error) {
	out := new(ShippingNoticeLog)
	err := c.cc.Invoke(ctx, "/shippingnoticelog.ShippingNoticeLogController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeLogControllerClient) Update(ctx context.Context, in *ShippingNoticeLog, opts ...grpc.CallOption) (*ShippingNoticeLog, error) {
	out := new(ShippingNoticeLog)
	err := c.cc.Invoke(ctx, "/shippingnoticelog.ShippingNoticeLogController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeLogControllerClient) Destroy(ctx context.Context, in *ShippingNoticeLog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shippingnoticelog.ShippingNoticeLogController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingNoticeLogControllerServer is the server API for ShippingNoticeLogController service.
// All implementations must embed UnimplementedShippingNoticeLogControllerServer
// for forward compatibility
type ShippingNoticeLogControllerServer interface {
	List(*ShippingNoticeLogListRequest, ShippingNoticeLogController_ListServer) error
	Create(context.Context, *ShippingNoticeLog) (*ShippingNoticeLog, error)
	Retrieve(context.Context, *ShippingNoticeLogRetrieveRequest) (*ShippingNoticeLog, error)
	Update(context.Context, *ShippingNoticeLog) (*ShippingNoticeLog, error)
	Destroy(context.Context, *ShippingNoticeLog) (*emptypb.Empty, error)
	mustEmbedUnimplementedShippingNoticeLogControllerServer()
}

// UnimplementedShippingNoticeLogControllerServer must be embedded to have forward compatible implementations.
type UnimplementedShippingNoticeLogControllerServer struct {
}

func (UnimplementedShippingNoticeLogControllerServer) List(*ShippingNoticeLogListRequest, ShippingNoticeLogController_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedShippingNoticeLogControllerServer) Create(context.Context, *ShippingNoticeLog) (*ShippingNoticeLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedShippingNoticeLogControllerServer) Retrieve(context.Context, *ShippingNoticeLogRetrieveRequest) (*ShippingNoticeLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedShippingNoticeLogControllerServer) Update(context.Context, *ShippingNoticeLog) (*ShippingNoticeLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedShippingNoticeLogControllerServer) Destroy(context.Context, *ShippingNoticeLog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedShippingNoticeLogControllerServer) mustEmbedUnimplementedShippingNoticeLogControllerServer() {
}

// UnsafeShippingNoticeLogControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingNoticeLogControllerServer will
// result in compilation errors.
type UnsafeShippingNoticeLogControllerServer interface {
	mustEmbedUnimplementedShippingNoticeLogControllerServer()
}

func RegisterShippingNoticeLogControllerServer(s grpc.ServiceRegistrar, srv ShippingNoticeLogControllerServer) {
	s.RegisterService(&ShippingNoticeLogController_ServiceDesc, srv)
}

func _ShippingNoticeLogController_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShippingNoticeLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShippingNoticeLogControllerServer).List(m, &shippingNoticeLogControllerListServer{stream})
}

type ShippingNoticeLogController_ListServer interface {
	Send(*ShippingNoticeLog) error
	grpc.ServerStream
}

type shippingNoticeLogControllerListServer struct {
	grpc.ServerStream
}

func (x *shippingNoticeLogControllerListServer) Send(m *ShippingNoticeLog) error {
	return x.ServerStream.SendMsg(m)
}

func _ShippingNoticeLogController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeLogControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippingnoticelog.ShippingNoticeLogController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeLogControllerServer).Create(ctx, req.(*ShippingNoticeLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeLogController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeLogRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeLogControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippingnoticelog.ShippingNoticeLogController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeLogControllerServer).Retrieve(ctx, req.(*ShippingNoticeLogRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeLogController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeLogControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippingnoticelog.ShippingNoticeLogController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeLogControllerServer).Update(ctx, req.(*ShippingNoticeLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeLogController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeLogControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippingnoticelog.ShippingNoticeLogController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeLogControllerServer).Destroy(ctx, req.(*ShippingNoticeLog))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingNoticeLogController_ServiceDesc is the grpc.ServiceDesc for ShippingNoticeLogController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingNoticeLogController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shippingnoticelog.ShippingNoticeLogController",
	HandlerType: (*ShippingNoticeLogControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ShippingNoticeLogController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ShippingNoticeLogController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShippingNoticeLogController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ShippingNoticeLogController_Destroy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ShippingNoticeLogController_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shipping_notice_log.proto",
}
