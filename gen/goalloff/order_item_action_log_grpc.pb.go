// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order_item_action_log.proto

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderItemActionLogControllerClient is the client API for OrderItemActionLogController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemActionLogControllerClient interface {
	List(ctx context.Context, in *OrderItemActionLogListRequest, opts ...grpc.CallOption) (OrderItemActionLogController_ListClient, error)
	Create(ctx context.Context, in *OrderItemActionLog, opts ...grpc.CallOption) (*OrderItemActionLog, error)
	Retrieve(ctx context.Context, in *OrderItemActionLogRetrieveRequest, opts ...grpc.CallOption) (*OrderItemActionLog, error)
	Update(ctx context.Context, in *OrderItemActionLog, opts ...grpc.CallOption) (*OrderItemActionLog, error)
	Destroy(ctx context.Context, in *OrderItemActionLog, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderItemActionLogControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemActionLogControllerClient(cc grpc.ClientConnInterface) OrderItemActionLogControllerClient {
	return &orderItemActionLogControllerClient{cc}
}

func (c *orderItemActionLogControllerClient) List(ctx context.Context, in *OrderItemActionLogListRequest, opts ...grpc.CallOption) (OrderItemActionLogController_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderItemActionLogController_ServiceDesc.Streams[0], "/orderitemactionlog.OrderItemActionLogController/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderItemActionLogControllerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderItemActionLogController_ListClient interface {
	Recv() (*OrderItemActionLog, error)
	grpc.ClientStream
}

type orderItemActionLogControllerListClient struct {
	grpc.ClientStream
}

func (x *orderItemActionLogControllerListClient) Recv() (*OrderItemActionLog, error) {
	m := new(OrderItemActionLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderItemActionLogControllerClient) Create(ctx context.Context, in *OrderItemActionLog, opts ...grpc.CallOption) (*OrderItemActionLog, error) {
	out := new(OrderItemActionLog)
	err := c.cc.Invoke(ctx, "/orderitemactionlog.OrderItemActionLogController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemActionLogControllerClient) Retrieve(ctx context.Context, in *OrderItemActionLogRetrieveRequest, opts ...grpc.CallOption) (*OrderItemActionLog, error) {
	out := new(OrderItemActionLog)
	err := c.cc.Invoke(ctx, "/orderitemactionlog.OrderItemActionLogController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemActionLogControllerClient) Update(ctx context.Context, in *OrderItemActionLog, opts ...grpc.CallOption) (*OrderItemActionLog, error) {
	out := new(OrderItemActionLog)
	err := c.cc.Invoke(ctx, "/orderitemactionlog.OrderItemActionLogController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemActionLogControllerClient) Destroy(ctx context.Context, in *OrderItemActionLog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orderitemactionlog.OrderItemActionLogController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemActionLogControllerServer is the server API for OrderItemActionLogController service.
// All implementations must embed UnimplementedOrderItemActionLogControllerServer
// for forward compatibility
type OrderItemActionLogControllerServer interface {
	List(*OrderItemActionLogListRequest, OrderItemActionLogController_ListServer) error
	Create(context.Context, *OrderItemActionLog) (*OrderItemActionLog, error)
	Retrieve(context.Context, *OrderItemActionLogRetrieveRequest) (*OrderItemActionLog, error)
	Update(context.Context, *OrderItemActionLog) (*OrderItemActionLog, error)
	Destroy(context.Context, *OrderItemActionLog) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderItemActionLogControllerServer()
}

// UnimplementedOrderItemActionLogControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemActionLogControllerServer struct {
}

func (UnimplementedOrderItemActionLogControllerServer) List(*OrderItemActionLogListRequest, OrderItemActionLogController_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrderItemActionLogControllerServer) Create(context.Context, *OrderItemActionLog) (*OrderItemActionLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderItemActionLogControllerServer) Retrieve(context.Context, *OrderItemActionLogRetrieveRequest) (*OrderItemActionLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedOrderItemActionLogControllerServer) Update(context.Context, *OrderItemActionLog) (*OrderItemActionLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderItemActionLogControllerServer) Destroy(context.Context, *OrderItemActionLog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedOrderItemActionLogControllerServer) mustEmbedUnimplementedOrderItemActionLogControllerServer() {
}

// UnsafeOrderItemActionLogControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemActionLogControllerServer will
// result in compilation errors.
type UnsafeOrderItemActionLogControllerServer interface {
	mustEmbedUnimplementedOrderItemActionLogControllerServer()
}

func RegisterOrderItemActionLogControllerServer(s grpc.ServiceRegistrar, srv OrderItemActionLogControllerServer) {
	s.RegisterService(&OrderItemActionLogController_ServiceDesc, srv)
}

func _OrderItemActionLogController_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderItemActionLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderItemActionLogControllerServer).List(m, &orderItemActionLogControllerListServer{stream})
}

type OrderItemActionLogController_ListServer interface {
	Send(*OrderItemActionLog) error
	grpc.ServerStream
}

type orderItemActionLogControllerListServer struct {
	grpc.ServerStream
}

func (x *orderItemActionLogControllerListServer) Send(m *OrderItemActionLog) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderItemActionLogController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemActionLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemActionLogControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemactionlog.OrderItemActionLogController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemActionLogControllerServer).Create(ctx, req.(*OrderItemActionLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemActionLogController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemActionLogRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemActionLogControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemactionlog.OrderItemActionLogController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemActionLogControllerServer).Retrieve(ctx, req.(*OrderItemActionLogRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemActionLogController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemActionLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemActionLogControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemactionlog.OrderItemActionLogController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemActionLogControllerServer).Update(ctx, req.(*OrderItemActionLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemActionLogController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemActionLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemActionLogControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemactionlog.OrderItemActionLogController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemActionLogControllerServer).Destroy(ctx, req.(*OrderItemActionLog))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemActionLogController_ServiceDesc is the grpc.ServiceDesc for OrderItemActionLogController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemActionLogController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderitemactionlog.OrderItemActionLogController",
	HandlerType: (*OrderItemActionLogControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderItemActionLogController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _OrderItemActionLogController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderItemActionLogController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _OrderItemActionLogController_Destroy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _OrderItemActionLogController_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order_item_action_log.proto",
}
