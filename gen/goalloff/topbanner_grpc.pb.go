// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopBannerClient is the client API for TopBanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopBannerClient interface {
	GetTopBanner(ctx context.Context, in *GetTopBannerRequest, opts ...grpc.CallOption) (*GetTopBannerResponse, error)
	ListTopBanners(ctx context.Context, in *ListTopBannersRequest, opts ...grpc.CallOption) (*ListTopBannersResponse, error)
	EditTopBanner(ctx context.Context, in *EditTopBannerRequest, opts ...grpc.CallOption) (*EditTopBannerResponse, error)
	CreateTopBanner(ctx context.Context, in *CreateTopBannerRequest, opts ...grpc.CallOption) (*CreateTopBannerResponse, error)
}

type topBannerClient struct {
	cc grpc.ClientConnInterface
}

func NewTopBannerClient(cc grpc.ClientConnInterface) TopBannerClient {
	return &topBannerClient{cc}
}

func (c *topBannerClient) GetTopBanner(ctx context.Context, in *GetTopBannerRequest, opts ...grpc.CallOption) (*GetTopBannerResponse, error) {
	out := new(GetTopBannerResponse)
	err := c.cc.Invoke(ctx, "/goalloff.TopBanner/GetTopBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topBannerClient) ListTopBanners(ctx context.Context, in *ListTopBannersRequest, opts ...grpc.CallOption) (*ListTopBannersResponse, error) {
	out := new(ListTopBannersResponse)
	err := c.cc.Invoke(ctx, "/goalloff.TopBanner/ListTopBanners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topBannerClient) EditTopBanner(ctx context.Context, in *EditTopBannerRequest, opts ...grpc.CallOption) (*EditTopBannerResponse, error) {
	out := new(EditTopBannerResponse)
	err := c.cc.Invoke(ctx, "/goalloff.TopBanner/EditTopBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topBannerClient) CreateTopBanner(ctx context.Context, in *CreateTopBannerRequest, opts ...grpc.CallOption) (*CreateTopBannerResponse, error) {
	out := new(CreateTopBannerResponse)
	err := c.cc.Invoke(ctx, "/goalloff.TopBanner/CreateTopBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopBannerServer is the server API for TopBanner service.
// All implementations must embed UnimplementedTopBannerServer
// for forward compatibility
type TopBannerServer interface {
	GetTopBanner(context.Context, *GetTopBannerRequest) (*GetTopBannerResponse, error)
	ListTopBanners(context.Context, *ListTopBannersRequest) (*ListTopBannersResponse, error)
	EditTopBanner(context.Context, *EditTopBannerRequest) (*EditTopBannerResponse, error)
	CreateTopBanner(context.Context, *CreateTopBannerRequest) (*CreateTopBannerResponse, error)
	mustEmbedUnimplementedTopBannerServer()
}

// UnimplementedTopBannerServer must be embedded to have forward compatible implementations.
type UnimplementedTopBannerServer struct {
}

func (UnimplementedTopBannerServer) GetTopBanner(context.Context, *GetTopBannerRequest) (*GetTopBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopBanner not implemented")
}
func (UnimplementedTopBannerServer) ListTopBanners(context.Context, *ListTopBannersRequest) (*ListTopBannersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopBanners not implemented")
}
func (UnimplementedTopBannerServer) EditTopBanner(context.Context, *EditTopBannerRequest) (*EditTopBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTopBanner not implemented")
}
func (UnimplementedTopBannerServer) CreateTopBanner(context.Context, *CreateTopBannerRequest) (*CreateTopBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopBanner not implemented")
}
func (UnimplementedTopBannerServer) mustEmbedUnimplementedTopBannerServer() {}

// UnsafeTopBannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopBannerServer will
// result in compilation errors.
type UnsafeTopBannerServer interface {
	mustEmbedUnimplementedTopBannerServer()
}

func RegisterTopBannerServer(s grpc.ServiceRegistrar, srv TopBannerServer) {
	s.RegisterService(&TopBanner_ServiceDesc, srv)
}

func _TopBanner_GetTopBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopBannerServer).GetTopBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.TopBanner/GetTopBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopBannerServer).GetTopBanner(ctx, req.(*GetTopBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopBanner_ListTopBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopBannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopBannerServer).ListTopBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.TopBanner/ListTopBanners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopBannerServer).ListTopBanners(ctx, req.(*ListTopBannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopBanner_EditTopBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTopBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopBannerServer).EditTopBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.TopBanner/EditTopBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopBannerServer).EditTopBanner(ctx, req.(*EditTopBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopBanner_CreateTopBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopBannerServer).CreateTopBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.TopBanner/CreateTopBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopBannerServer).CreateTopBanner(ctx, req.(*CreateTopBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopBanner_ServiceDesc is the grpc.ServiceDesc for TopBanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopBanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goalloff.TopBanner",
	HandlerType: (*TopBannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopBanner",
			Handler:    _TopBanner_GetTopBanner_Handler,
		},
		{
			MethodName: "ListTopBanners",
			Handler:    _TopBanner_ListTopBanners_Handler,
		},
		{
			MethodName: "EditTopBanner",
			Handler:    _TopBanner_EditTopBanner_Handler,
		},
		{
			MethodName: "CreateTopBanner",
			Handler:    _TopBanner_CreateTopBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topbanner.proto",
}
