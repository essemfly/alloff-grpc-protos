// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderAnalyticsControllerClient is the client API for OrderAnalyticsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderAnalyticsControllerClient interface {
	DailyOrderStat(ctx context.Context, in *DailyOrderStatRequest, opts ...grpc.CallOption) (*OrderStatResponse, error)
}

type orderAnalyticsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderAnalyticsControllerClient(cc grpc.ClientConnInterface) OrderAnalyticsControllerClient {
	return &orderAnalyticsControllerClient{cc}
}

func (c *orderAnalyticsControllerClient) DailyOrderStat(ctx context.Context, in *DailyOrderStatRequest, opts ...grpc.CallOption) (*OrderStatResponse, error) {
	out := new(OrderStatResponse)
	err := c.cc.Invoke(ctx, "/orderanalytics.OrderAnalyticsController/DailyOrderStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderAnalyticsControllerServer is the server API for OrderAnalyticsController service.
// All implementations must embed UnimplementedOrderAnalyticsControllerServer
// for forward compatibility
type OrderAnalyticsControllerServer interface {
	DailyOrderStat(context.Context, *DailyOrderStatRequest) (*OrderStatResponse, error)
	mustEmbedUnimplementedOrderAnalyticsControllerServer()
}

// UnimplementedOrderAnalyticsControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderAnalyticsControllerServer struct {
}

func (UnimplementedOrderAnalyticsControllerServer) DailyOrderStat(context.Context, *DailyOrderStatRequest) (*OrderStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyOrderStat not implemented")
}
func (UnimplementedOrderAnalyticsControllerServer) mustEmbedUnimplementedOrderAnalyticsControllerServer() {
}

// UnsafeOrderAnalyticsControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderAnalyticsControllerServer will
// result in compilation errors.
type UnsafeOrderAnalyticsControllerServer interface {
	mustEmbedUnimplementedOrderAnalyticsControllerServer()
}

func RegisterOrderAnalyticsControllerServer(s grpc.ServiceRegistrar, srv OrderAnalyticsControllerServer) {
	s.RegisterService(&OrderAnalyticsController_ServiceDesc, srv)
}

func _OrderAnalyticsController_DailyOrderStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyOrderStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderAnalyticsControllerServer).DailyOrderStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderanalytics.OrderAnalyticsController/DailyOrderStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderAnalyticsControllerServer).DailyOrderStat(ctx, req.(*DailyOrderStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderAnalyticsController_ServiceDesc is the grpc.ServiceDesc for OrderAnalyticsController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderAnalyticsController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderanalytics.OrderAnalyticsController",
	HandlerType: (*OrderAnalyticsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DailyOrderStat",
			Handler:    _OrderAnalyticsController_DailyOrderStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_analytics.proto",
}
