// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: exhibition.proto

package goalloff

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExhibitionType int32

const (
	ExhibitionType_EXHIBITION_NORMAL    ExhibitionType = 0
	ExhibitionType_EXHIBITION_TIMEDEAL  ExhibitionType = 1
	ExhibitionType_EXHIBITION_GROUPDEAL ExhibitionType = 2
)

// Enum value maps for ExhibitionType.
var (
	ExhibitionType_name = map[int32]string{
		0: "EXHIBITION_NORMAL",
		1: "EXHIBITION_TIMEDEAL",
		2: "EXHIBITION_GROUPDEAL",
	}
	ExhibitionType_value = map[string]int32{
		"EXHIBITION_NORMAL":    0,
		"EXHIBITION_TIMEDEAL":  1,
		"EXHIBITION_GROUPDEAL": 2,
	}
)

func (x ExhibitionType) Enum() *ExhibitionType {
	p := new(ExhibitionType)
	*p = x
	return p
}

func (x ExhibitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExhibitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_exhibition_proto_enumTypes[0].Descriptor()
}

func (ExhibitionType) Type() protoreflect.EnumType {
	return &file_exhibition_proto_enumTypes[0]
}

func (x ExhibitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExhibitionType.Descriptor instead.
func (ExhibitionType) EnumDescriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{0}
}

type GetExhibitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhibitionId string `protobuf:"bytes,1,opt,name=exhibition_id,json=exhibitionId,proto3" json:"exhibition_id,omitempty"`
}

func (x *GetExhibitionRequest) Reset() {
	*x = GetExhibitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExhibitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExhibitionRequest) ProtoMessage() {}

func (x *GetExhibitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExhibitionRequest.ProtoReflect.Descriptor instead.
func (*GetExhibitionRequest) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{0}
}

func (x *GetExhibitionRequest) GetExhibitionId() string {
	if x != nil {
		return x.ExhibitionId
	}
	return ""
}

type ListExhibitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    int32          `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32          `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	GroupType ExhibitionType `protobuf:"varint,3,opt,name=group_type,json=groupType,proto3,enum=goalloff.ExhibitionType" json:"group_type,omitempty"`
	IsLive    bool           `protobuf:"varint,4,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	Query     *string        `protobuf:"bytes,5,opt,name=query,proto3,oneof" json:"query,omitempty"`
}

func (x *ListExhibitionsRequest) Reset() {
	*x = ListExhibitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExhibitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExhibitionsRequest) ProtoMessage() {}

func (x *ListExhibitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExhibitionsRequest.ProtoReflect.Descriptor instead.
func (*ListExhibitionsRequest) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{1}
}

func (x *ListExhibitionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListExhibitionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListExhibitionsRequest) GetGroupType() ExhibitionType {
	if x != nil {
		return x.GroupType
	}
	return ExhibitionType_EXHIBITION_NORMAL
}

func (x *ListExhibitionsRequest) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *ListExhibitionsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

type EditExhibitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhibitionId   string   `protobuf:"bytes,1,opt,name=exhibition_id,json=exhibitionId,proto3" json:"exhibition_id,omitempty"`
	BannerImage    *string  `protobuf:"bytes,2,opt,name=banner_image,json=bannerImage,proto3,oneof" json:"banner_image,omitempty"`
	ThumbnailImage *string  `protobuf:"bytes,3,opt,name=thumbnail_image,json=thumbnailImage,proto3,oneof" json:"thumbnail_image,omitempty"`
	Title          *string  `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Subtitle       *string  `protobuf:"bytes,5,opt,name=subtitle,proto3,oneof" json:"subtitle,omitempty"`
	Description    *string  `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	StartTime      *string  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	FinishTime     *string  `protobuf:"bytes,8,opt,name=finish_time,json=finishTime,proto3,oneof" json:"finish_time,omitempty"`
	PgIds          []string `protobuf:"bytes,9,rep,name=pg_ids,json=pgIds,proto3" json:"pg_ids,omitempty"`
	IsLive         *bool    `protobuf:"varint,10,opt,name=is_live,json=isLive,proto3,oneof" json:"is_live,omitempty"`
	TargetSales    *int32   `protobuf:"varint,11,opt,name=target_sales,json=targetSales,proto3,oneof" json:"target_sales,omitempty"`
}

func (x *EditExhibitionRequest) Reset() {
	*x = EditExhibitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditExhibitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditExhibitionRequest) ProtoMessage() {}

func (x *EditExhibitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditExhibitionRequest.ProtoReflect.Descriptor instead.
func (*EditExhibitionRequest) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{2}
}

func (x *EditExhibitionRequest) GetExhibitionId() string {
	if x != nil {
		return x.ExhibitionId
	}
	return ""
}

func (x *EditExhibitionRequest) GetBannerImage() string {
	if x != nil && x.BannerImage != nil {
		return *x.BannerImage
	}
	return ""
}

func (x *EditExhibitionRequest) GetThumbnailImage() string {
	if x != nil && x.ThumbnailImage != nil {
		return *x.ThumbnailImage
	}
	return ""
}

func (x *EditExhibitionRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *EditExhibitionRequest) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *EditExhibitionRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *EditExhibitionRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *EditExhibitionRequest) GetFinishTime() string {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return ""
}

func (x *EditExhibitionRequest) GetPgIds() []string {
	if x != nil {
		return x.PgIds
	}
	return nil
}

func (x *EditExhibitionRequest) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *EditExhibitionRequest) GetTargetSales() int32 {
	if x != nil && x.TargetSales != nil {
		return *x.TargetSales
	}
	return 0
}

type CreateExhibitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerImage    string         `protobuf:"bytes,1,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	ThumbnailImage string         `protobuf:"bytes,2,opt,name=thumbnail_image,json=thumbnailImage,proto3" json:"thumbnail_image,omitempty"`
	Title          string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle       string         `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Description    string         `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	StartTime      string         `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime     string         `protobuf:"bytes,7,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	PgIds          []string       `protobuf:"bytes,8,rep,name=pg_ids,json=pgIds,proto3" json:"pg_ids,omitempty"`
	ExhibitionType ExhibitionType `protobuf:"varint,9,opt,name=exhibition_type,json=exhibitionType,proto3,enum=goalloff.ExhibitionType" json:"exhibition_type,omitempty"`
	TargetSales    int32          `protobuf:"varint,10,opt,name=target_sales,json=targetSales,proto3" json:"target_sales,omitempty"`
}

func (x *CreateExhibitionRequest) Reset() {
	*x = CreateExhibitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExhibitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExhibitionRequest) ProtoMessage() {}

func (x *CreateExhibitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExhibitionRequest.ProtoReflect.Descriptor instead.
func (*CreateExhibitionRequest) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{3}
}

func (x *CreateExhibitionRequest) GetBannerImage() string {
	if x != nil {
		return x.BannerImage
	}
	return ""
}

func (x *CreateExhibitionRequest) GetThumbnailImage() string {
	if x != nil {
		return x.ThumbnailImage
	}
	return ""
}

func (x *CreateExhibitionRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateExhibitionRequest) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *CreateExhibitionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateExhibitionRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateExhibitionRequest) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *CreateExhibitionRequest) GetPgIds() []string {
	if x != nil {
		return x.PgIds
	}
	return nil
}

func (x *CreateExhibitionRequest) GetExhibitionType() ExhibitionType {
	if x != nil {
		return x.ExhibitionType
	}
	return ExhibitionType_EXHIBITION_NORMAL
}

func (x *CreateExhibitionRequest) GetTargetSales() int32 {
	if x != nil {
		return x.TargetSales
	}
	return 0
}

type GetExhibitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exhibition *ExhibitionMessage `protobuf:"bytes,1,opt,name=exhibition,proto3" json:"exhibition,omitempty"`
}

func (x *GetExhibitionResponse) Reset() {
	*x = GetExhibitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExhibitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExhibitionResponse) ProtoMessage() {}

func (x *GetExhibitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExhibitionResponse.ProtoReflect.Descriptor instead.
func (*GetExhibitionResponse) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{4}
}

func (x *GetExhibitionResponse) GetExhibition() *ExhibitionMessage {
	if x != nil {
		return x.Exhibition
	}
	return nil
}

type ListExhibitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exhibitions []*ExhibitionMessage `protobuf:"bytes,1,rep,name=exhibitions,proto3" json:"exhibitions,omitempty"`
	Offset      int32                `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalCounts int32                `protobuf:"varint,4,opt,name=total_counts,json=totalCounts,proto3" json:"total_counts,omitempty"`
	GroupType   ExhibitionType       `protobuf:"varint,5,opt,name=group_type,json=groupType,proto3,enum=goalloff.ExhibitionType" json:"group_type,omitempty"`
	IsLive      bool                 `protobuf:"varint,6,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	Query       string               `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListExhibitionsResponse) Reset() {
	*x = ListExhibitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExhibitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExhibitionsResponse) ProtoMessage() {}

func (x *ListExhibitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExhibitionsResponse.ProtoReflect.Descriptor instead.
func (*ListExhibitionsResponse) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{5}
}

func (x *ListExhibitionsResponse) GetExhibitions() []*ExhibitionMessage {
	if x != nil {
		return x.Exhibitions
	}
	return nil
}

func (x *ListExhibitionsResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListExhibitionsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListExhibitionsResponse) GetTotalCounts() int32 {
	if x != nil {
		return x.TotalCounts
	}
	return 0
}

func (x *ListExhibitionsResponse) GetGroupType() ExhibitionType {
	if x != nil {
		return x.GroupType
	}
	return ExhibitionType_EXHIBITION_NORMAL
}

func (x *ListExhibitionsResponse) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *ListExhibitionsResponse) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type EditExhibitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exhibition *ExhibitionMessage `protobuf:"bytes,1,opt,name=exhibition,proto3" json:"exhibition,omitempty"`
}

func (x *EditExhibitionResponse) Reset() {
	*x = EditExhibitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditExhibitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditExhibitionResponse) ProtoMessage() {}

func (x *EditExhibitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditExhibitionResponse.ProtoReflect.Descriptor instead.
func (*EditExhibitionResponse) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{6}
}

func (x *EditExhibitionResponse) GetExhibition() *ExhibitionMessage {
	if x != nil {
		return x.Exhibition
	}
	return nil
}

type CreateExhibitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exhibition *ExhibitionMessage `protobuf:"bytes,1,opt,name=exhibition,proto3" json:"exhibition,omitempty"`
}

func (x *CreateExhibitionResponse) Reset() {
	*x = CreateExhibitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExhibitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExhibitionResponse) ProtoMessage() {}

func (x *CreateExhibitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExhibitionResponse.ProtoReflect.Descriptor instead.
func (*CreateExhibitionResponse) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{7}
}

func (x *CreateExhibitionResponse) GetExhibition() *ExhibitionMessage {
	if x != nil {
		return x.Exhibition
	}
	return nil
}

type ExhibitionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhibitionId   string                 `protobuf:"bytes,1,opt,name=exhibition_id,json=exhibitionId,proto3" json:"exhibition_id,omitempty"`
	BannerImage    string                 `protobuf:"bytes,2,opt,name=banner_image,json=bannerImage,proto3" json:"banner_image,omitempty"`
	ThumbnailImage string                 `protobuf:"bytes,3,opt,name=thumbnail_image,json=thumbnailImage,proto3" json:"thumbnail_image,omitempty"`
	Title          string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle       string                 `protobuf:"bytes,5,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Description    string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	StartTime      string                 `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime     string                 `protobuf:"bytes,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Pgs            []*ProductGroupMessage `protobuf:"bytes,9,rep,name=pgs,proto3" json:"pgs,omitempty"`
	IsLive         bool                   `protobuf:"varint,10,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	ExhibitionType ExhibitionType         `protobuf:"varint,11,opt,name=exhibition_type,json=exhibitionType,proto3,enum=goalloff.ExhibitionType" json:"exhibition_type,omitempty"`
	TargetSales    int32                  `protobuf:"varint,12,opt,name=target_sales,json=targetSales,proto3" json:"target_sales,omitempty"`
	CurrentSales   int32                  `protobuf:"varint,13,opt,name=current_sales,json=currentSales,proto3" json:"current_sales,omitempty"`
}

func (x *ExhibitionMessage) Reset() {
	*x = ExhibitionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exhibition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExhibitionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExhibitionMessage) ProtoMessage() {}

func (x *ExhibitionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_exhibition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExhibitionMessage.ProtoReflect.Descriptor instead.
func (*ExhibitionMessage) Descriptor() ([]byte, []int) {
	return file_exhibition_proto_rawDescGZIP(), []int{8}
}

func (x *ExhibitionMessage) GetExhibitionId() string {
	if x != nil {
		return x.ExhibitionId
	}
	return ""
}

func (x *ExhibitionMessage) GetBannerImage() string {
	if x != nil {
		return x.BannerImage
	}
	return ""
}

func (x *ExhibitionMessage) GetThumbnailImage() string {
	if x != nil {
		return x.ThumbnailImage
	}
	return ""
}

func (x *ExhibitionMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExhibitionMessage) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *ExhibitionMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExhibitionMessage) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExhibitionMessage) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *ExhibitionMessage) GetPgs() []*ProductGroupMessage {
	if x != nil {
		return x.Pgs
	}
	return nil
}

func (x *ExhibitionMessage) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *ExhibitionMessage) GetExhibitionType() ExhibitionType {
	if x != nil {
		return x.ExhibitionType
	}
	return ExhibitionType_EXHIBITION_NORMAL
}

func (x *ExhibitionMessage) GetTargetSales() int32 {
	if x != nil {
		return x.TargetSales
	}
	return 0
}

func (x *ExhibitionMessage) GetCurrentSales() int32 {
	if x != nil {
		return x.CurrentSales
	}
	return 0
}

var File_exhibition_proto protoreflect.FileDescriptor

var file_exhibition_proto_rawDesc = []byte{
	0x0a, 0x10, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x1a, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbd, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61,
	0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa4, 0x04,
	0x0a, 0x15, 0x45, 0x64, 0x69, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x67, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x65, 0x78, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61,
	0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e,
	0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x16, 0x45, 0x64, 0x69, 0x74, 0x45,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66,
	0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x03, 0x0a, 0x11, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x70, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0f,
	0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66,
	0x2e, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x2a, 0x5a, 0x0a, 0x0e, 0x45, 0x78, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x48,
	0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x48, 0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x48,
	0x49, 0x42, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x44, 0x45, 0x41,
	0x4c, 0x10, 0x02, 0x32, 0xe6, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f,
	0x66, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x61, 0x6c,
	0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e,
	0x45, 0x64, 0x69, 0x74, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x45, 0x78,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x45,
	0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x61, 0x6c, 0x6c,
	0x6f, 0x66, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x73, 0x73, 0x62,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x2d, 0x67, 0x72, 0x70,
	0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x61,
	0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exhibition_proto_rawDescOnce sync.Once
	file_exhibition_proto_rawDescData = file_exhibition_proto_rawDesc
)

func file_exhibition_proto_rawDescGZIP() []byte {
	file_exhibition_proto_rawDescOnce.Do(func() {
		file_exhibition_proto_rawDescData = protoimpl.X.CompressGZIP(file_exhibition_proto_rawDescData)
	})
	return file_exhibition_proto_rawDescData
}

var file_exhibition_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_exhibition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_exhibition_proto_goTypes = []interface{}{
	(ExhibitionType)(0),              // 0: goalloff.ExhibitionType
	(*GetExhibitionRequest)(nil),     // 1: goalloff.GetExhibitionRequest
	(*ListExhibitionsRequest)(nil),   // 2: goalloff.ListExhibitionsRequest
	(*EditExhibitionRequest)(nil),    // 3: goalloff.EditExhibitionRequest
	(*CreateExhibitionRequest)(nil),  // 4: goalloff.CreateExhibitionRequest
	(*GetExhibitionResponse)(nil),    // 5: goalloff.GetExhibitionResponse
	(*ListExhibitionsResponse)(nil),  // 6: goalloff.ListExhibitionsResponse
	(*EditExhibitionResponse)(nil),   // 7: goalloff.EditExhibitionResponse
	(*CreateExhibitionResponse)(nil), // 8: goalloff.CreateExhibitionResponse
	(*ExhibitionMessage)(nil),        // 9: goalloff.ExhibitionMessage
	(*ProductGroupMessage)(nil),      // 10: goalloff.ProductGroupMessage
}
var file_exhibition_proto_depIdxs = []int32{
	0,  // 0: goalloff.ListExhibitionsRequest.group_type:type_name -> goalloff.ExhibitionType
	0,  // 1: goalloff.CreateExhibitionRequest.exhibition_type:type_name -> goalloff.ExhibitionType
	9,  // 2: goalloff.GetExhibitionResponse.exhibition:type_name -> goalloff.ExhibitionMessage
	9,  // 3: goalloff.ListExhibitionsResponse.exhibitions:type_name -> goalloff.ExhibitionMessage
	0,  // 4: goalloff.ListExhibitionsResponse.group_type:type_name -> goalloff.ExhibitionType
	9,  // 5: goalloff.EditExhibitionResponse.exhibition:type_name -> goalloff.ExhibitionMessage
	9,  // 6: goalloff.CreateExhibitionResponse.exhibition:type_name -> goalloff.ExhibitionMessage
	10, // 7: goalloff.ExhibitionMessage.pgs:type_name -> goalloff.ProductGroupMessage
	0,  // 8: goalloff.ExhibitionMessage.exhibition_type:type_name -> goalloff.ExhibitionType
	1,  // 9: goalloff.Exhibition.GetExhibition:input_type -> goalloff.GetExhibitionRequest
	2,  // 10: goalloff.Exhibition.ListExhibitions:input_type -> goalloff.ListExhibitionsRequest
	3,  // 11: goalloff.Exhibition.EditExhibition:input_type -> goalloff.EditExhibitionRequest
	4,  // 12: goalloff.Exhibition.CreateExhibition:input_type -> goalloff.CreateExhibitionRequest
	5,  // 13: goalloff.Exhibition.GetExhibition:output_type -> goalloff.GetExhibitionResponse
	6,  // 14: goalloff.Exhibition.ListExhibitions:output_type -> goalloff.ListExhibitionsResponse
	7,  // 15: goalloff.Exhibition.EditExhibition:output_type -> goalloff.EditExhibitionResponse
	8,  // 16: goalloff.Exhibition.CreateExhibition:output_type -> goalloff.CreateExhibitionResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_exhibition_proto_init() }
func file_exhibition_proto_init() {
	if File_exhibition_proto != nil {
		return
	}
	file_productGroup_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_exhibition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExhibitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExhibitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditExhibitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExhibitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExhibitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExhibitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditExhibitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExhibitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exhibition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExhibitionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_exhibition_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_exhibition_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exhibition_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exhibition_proto_goTypes,
		DependencyIndexes: file_exhibition_proto_depIdxs,
		EnumInfos:         file_exhibition_proto_enumTypes,
		MessageInfos:      file_exhibition_proto_msgTypes,
	}.Build()
	File_exhibition_proto = out.File
	file_exhibition_proto_rawDesc = nil
	file_exhibition_proto_goTypes = nil
	file_exhibition_proto_depIdxs = nil
}
