// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceivedItemLogControllerClient is the client API for ReceivedItemLogController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceivedItemLogControllerClient interface {
	List(ctx context.Context, in *ReceivedItemLogListRequest, opts ...grpc.CallOption) (ReceivedItemLogController_ListClient, error)
	Create(ctx context.Context, in *ReceivedItemLog, opts ...grpc.CallOption) (*ReceivedItemLog, error)
	Retrieve(ctx context.Context, in *ReceivedItemLogRetrieveRequest, opts ...grpc.CallOption) (*ReceivedItemLog, error)
	Update(ctx context.Context, in *ReceivedItemLog, opts ...grpc.CallOption) (*ReceivedItemLog, error)
	Destroy(ctx context.Context, in *ReceivedItemLog, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type receivedItemLogControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewReceivedItemLogControllerClient(cc grpc.ClientConnInterface) ReceivedItemLogControllerClient {
	return &receivedItemLogControllerClient{cc}
}

func (c *receivedItemLogControllerClient) List(ctx context.Context, in *ReceivedItemLogListRequest, opts ...grpc.CallOption) (ReceivedItemLogController_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReceivedItemLogController_ServiceDesc.Streams[0], "/receiveditemlog.ReceivedItemLogController/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &receivedItemLogControllerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReceivedItemLogController_ListClient interface {
	Recv() (*ReceivedItemLog, error)
	grpc.ClientStream
}

type receivedItemLogControllerListClient struct {
	grpc.ClientStream
}

func (x *receivedItemLogControllerListClient) Recv() (*ReceivedItemLog, error) {
	m := new(ReceivedItemLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *receivedItemLogControllerClient) Create(ctx context.Context, in *ReceivedItemLog, opts ...grpc.CallOption) (*ReceivedItemLog, error) {
	out := new(ReceivedItemLog)
	err := c.cc.Invoke(ctx, "/receiveditemlog.ReceivedItemLogController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemLogControllerClient) Retrieve(ctx context.Context, in *ReceivedItemLogRetrieveRequest, opts ...grpc.CallOption) (*ReceivedItemLog, error) {
	out := new(ReceivedItemLog)
	err := c.cc.Invoke(ctx, "/receiveditemlog.ReceivedItemLogController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemLogControllerClient) Update(ctx context.Context, in *ReceivedItemLog, opts ...grpc.CallOption) (*ReceivedItemLog, error) {
	out := new(ReceivedItemLog)
	err := c.cc.Invoke(ctx, "/receiveditemlog.ReceivedItemLogController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemLogControllerClient) Destroy(ctx context.Context, in *ReceivedItemLog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/receiveditemlog.ReceivedItemLogController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceivedItemLogControllerServer is the server API for ReceivedItemLogController service.
// All implementations must embed UnimplementedReceivedItemLogControllerServer
// for forward compatibility
type ReceivedItemLogControllerServer interface {
	List(*ReceivedItemLogListRequest, ReceivedItemLogController_ListServer) error
	Create(context.Context, *ReceivedItemLog) (*ReceivedItemLog, error)
	Retrieve(context.Context, *ReceivedItemLogRetrieveRequest) (*ReceivedItemLog, error)
	Update(context.Context, *ReceivedItemLog) (*ReceivedItemLog, error)
	Destroy(context.Context, *ReceivedItemLog) (*emptypb.Empty, error)
	mustEmbedUnimplementedReceivedItemLogControllerServer()
}

// UnimplementedReceivedItemLogControllerServer must be embedded to have forward compatible implementations.
type UnimplementedReceivedItemLogControllerServer struct {
}

func (UnimplementedReceivedItemLogControllerServer) List(*ReceivedItemLogListRequest, ReceivedItemLogController_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReceivedItemLogControllerServer) Create(context.Context, *ReceivedItemLog) (*ReceivedItemLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReceivedItemLogControllerServer) Retrieve(context.Context, *ReceivedItemLogRetrieveRequest) (*ReceivedItemLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedReceivedItemLogControllerServer) Update(context.Context, *ReceivedItemLog) (*ReceivedItemLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReceivedItemLogControllerServer) Destroy(context.Context, *ReceivedItemLog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedReceivedItemLogControllerServer) mustEmbedUnimplementedReceivedItemLogControllerServer() {
}

// UnsafeReceivedItemLogControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceivedItemLogControllerServer will
// result in compilation errors.
type UnsafeReceivedItemLogControllerServer interface {
	mustEmbedUnimplementedReceivedItemLogControllerServer()
}

func RegisterReceivedItemLogControllerServer(s grpc.ServiceRegistrar, srv ReceivedItemLogControllerServer) {
	s.RegisterService(&ReceivedItemLogController_ServiceDesc, srv)
}

func _ReceivedItemLogController_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceivedItemLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReceivedItemLogControllerServer).List(m, &receivedItemLogControllerListServer{stream})
}

type ReceivedItemLogController_ListServer interface {
	Send(*ReceivedItemLog) error
	grpc.ServerStream
}

type receivedItemLogControllerListServer struct {
	grpc.ServerStream
}

func (x *receivedItemLogControllerListServer) Send(m *ReceivedItemLog) error {
	return x.ServerStream.SendMsg(m)
}

func _ReceivedItemLogController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemLogControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receiveditemlog.ReceivedItemLogController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemLogControllerServer).Create(ctx, req.(*ReceivedItemLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemLogController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemLogRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemLogControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receiveditemlog.ReceivedItemLogController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemLogControllerServer).Retrieve(ctx, req.(*ReceivedItemLogRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemLogController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemLogControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receiveditemlog.ReceivedItemLogController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemLogControllerServer).Update(ctx, req.(*ReceivedItemLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemLogController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemLogControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receiveditemlog.ReceivedItemLogController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemLogControllerServer).Destroy(ctx, req.(*ReceivedItemLog))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceivedItemLogController_ServiceDesc is the grpc.ServiceDesc for ReceivedItemLogController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceivedItemLogController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receiveditemlog.ReceivedItemLogController",
	HandlerType: (*ReceivedItemLogControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReceivedItemLogController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ReceivedItemLogController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReceivedItemLogController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ReceivedItemLogController_Destroy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ReceivedItemLogController_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "received_item_log.proto",
}
