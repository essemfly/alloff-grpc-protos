// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order_item.proto

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderItemControllerClient is the client API for OrderItemController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemControllerClient interface {
	List(ctx context.Context, in *OrderItemListRequest, opts ...grpc.CallOption) (*OrderItemListResponse, error)
	Create(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderItem, error)
	Retrieve(ctx context.Context, in *OrderItemRetrieveRequest, opts ...grpc.CallOption) (*OrderItem, error)
	Update(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderItem, error)
	Destroy(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeStatus(ctx context.Context, in *OrderItemStatusChangeRequest, opts ...grpc.CallOption) (*OrderItem, error)
	SetTrackingInfo(ctx context.Context, in *OrderItemSetTrackingInfoRequest, opts ...grpc.CallOption) (*OrderItem, error)
	AddMemo(ctx context.Context, in *OrderItemAddMemoRequest, opts ...grpc.CallOption) (*OrderItem, error)
	DeleteMemo(ctx context.Context, in *OrderItemDeleteMemoRequest, opts ...grpc.CallOption) (*OrderItem, error)
	ForceReceive(ctx context.Context, in *OrderItemForceReceiveRequest, opts ...grpc.CallOption) (*OrderItem, error)
	UpdateRefund(ctx context.Context, in *UpdateRefundRequest, opts ...grpc.CallOption) (*OrderItem, error)
	AdjustPayment(ctx context.Context, in *OrderItemAdjustPaymentRequest, opts ...grpc.CallOption) (*OrderItem, error)
	GetOrderItemExcelData(ctx context.Context, in *OrderItemExcelDataRequest, opts ...grpc.CallOption) (OrderItemController_GetOrderItemExcelDataClient, error)
}

type orderItemControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemControllerClient(cc grpc.ClientConnInterface) OrderItemControllerClient {
	return &orderItemControllerClient{cc}
}

func (c *orderItemControllerClient) List(ctx context.Context, in *OrderItemListRequest, opts ...grpc.CallOption) (*OrderItemListResponse, error) {
	out := new(OrderItemListResponse)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) Create(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) Retrieve(ctx context.Context, in *OrderItemRetrieveRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) Update(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) Destroy(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) ChangeStatus(ctx context.Context, in *OrderItemStatusChangeRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) SetTrackingInfo(ctx context.Context, in *OrderItemSetTrackingInfoRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/SetTrackingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) AddMemo(ctx context.Context, in *OrderItemAddMemoRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/AddMemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) DeleteMemo(ctx context.Context, in *OrderItemDeleteMemoRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/DeleteMemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) ForceReceive(ctx context.Context, in *OrderItemForceReceiveRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/ForceReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) UpdateRefund(ctx context.Context, in *UpdateRefundRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/UpdateRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) AdjustPayment(ctx context.Context, in *OrderItemAdjustPaymentRequest, opts ...grpc.CallOption) (*OrderItem, error) {
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, "/orderitem.OrderItemController/AdjustPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemControllerClient) GetOrderItemExcelData(ctx context.Context, in *OrderItemExcelDataRequest, opts ...grpc.CallOption) (OrderItemController_GetOrderItemExcelDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderItemController_ServiceDesc.Streams[0], "/orderitem.OrderItemController/GetOrderItemExcelData", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderItemControllerGetOrderItemExcelDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderItemController_GetOrderItemExcelDataClient interface {
	Recv() (*OrderItem, error)
	grpc.ClientStream
}

type orderItemControllerGetOrderItemExcelDataClient struct {
	grpc.ClientStream
}

func (x *orderItemControllerGetOrderItemExcelDataClient) Recv() (*OrderItem, error) {
	m := new(OrderItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderItemControllerServer is the server API for OrderItemController service.
// All implementations must embed UnimplementedOrderItemControllerServer
// for forward compatibility
type OrderItemControllerServer interface {
	List(context.Context, *OrderItemListRequest) (*OrderItemListResponse, error)
	Create(context.Context, *OrderItem) (*OrderItem, error)
	Retrieve(context.Context, *OrderItemRetrieveRequest) (*OrderItem, error)
	Update(context.Context, *OrderItem) (*OrderItem, error)
	Destroy(context.Context, *OrderItem) (*emptypb.Empty, error)
	ChangeStatus(context.Context, *OrderItemStatusChangeRequest) (*OrderItem, error)
	SetTrackingInfo(context.Context, *OrderItemSetTrackingInfoRequest) (*OrderItem, error)
	AddMemo(context.Context, *OrderItemAddMemoRequest) (*OrderItem, error)
	DeleteMemo(context.Context, *OrderItemDeleteMemoRequest) (*OrderItem, error)
	ForceReceive(context.Context, *OrderItemForceReceiveRequest) (*OrderItem, error)
	UpdateRefund(context.Context, *UpdateRefundRequest) (*OrderItem, error)
	AdjustPayment(context.Context, *OrderItemAdjustPaymentRequest) (*OrderItem, error)
	GetOrderItemExcelData(*OrderItemExcelDataRequest, OrderItemController_GetOrderItemExcelDataServer) error
	mustEmbedUnimplementedOrderItemControllerServer()
}

// UnimplementedOrderItemControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemControllerServer struct {
}

func (UnimplementedOrderItemControllerServer) List(context.Context, *OrderItemListRequest) (*OrderItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrderItemControllerServer) Create(context.Context, *OrderItem) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderItemControllerServer) Retrieve(context.Context, *OrderItemRetrieveRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedOrderItemControllerServer) Update(context.Context, *OrderItem) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderItemControllerServer) Destroy(context.Context, *OrderItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedOrderItemControllerServer) ChangeStatus(context.Context, *OrderItemStatusChangeRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedOrderItemControllerServer) SetTrackingInfo(context.Context, *OrderItemSetTrackingInfoRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrackingInfo not implemented")
}
func (UnimplementedOrderItemControllerServer) AddMemo(context.Context, *OrderItemAddMemoRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemo not implemented")
}
func (UnimplementedOrderItemControllerServer) DeleteMemo(context.Context, *OrderItemDeleteMemoRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemo not implemented")
}
func (UnimplementedOrderItemControllerServer) ForceReceive(context.Context, *OrderItemForceReceiveRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceReceive not implemented")
}
func (UnimplementedOrderItemControllerServer) UpdateRefund(context.Context, *UpdateRefundRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRefund not implemented")
}
func (UnimplementedOrderItemControllerServer) AdjustPayment(context.Context, *OrderItemAdjustPaymentRequest) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustPayment not implemented")
}
func (UnimplementedOrderItemControllerServer) GetOrderItemExcelData(*OrderItemExcelDataRequest, OrderItemController_GetOrderItemExcelDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderItemExcelData not implemented")
}
func (UnimplementedOrderItemControllerServer) mustEmbedUnimplementedOrderItemControllerServer() {}

// UnsafeOrderItemControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemControllerServer will
// result in compilation errors.
type UnsafeOrderItemControllerServer interface {
	mustEmbedUnimplementedOrderItemControllerServer()
}

func RegisterOrderItemControllerServer(s grpc.ServiceRegistrar, srv OrderItemControllerServer) {
	s.RegisterService(&OrderItemController_ServiceDesc, srv)
}

func _OrderItemController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).List(ctx, req.(*OrderItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).Create(ctx, req.(*OrderItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).Retrieve(ctx, req.(*OrderItemRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).Update(ctx, req.(*OrderItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).Destroy(ctx, req.(*OrderItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).ChangeStatus(ctx, req.(*OrderItemStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_SetTrackingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemSetTrackingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).SetTrackingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/SetTrackingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).SetTrackingInfo(ctx, req.(*OrderItemSetTrackingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_AddMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAddMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).AddMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/AddMemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).AddMemo(ctx, req.(*OrderItemAddMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_DeleteMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemDeleteMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).DeleteMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/DeleteMemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).DeleteMemo(ctx, req.(*OrderItemDeleteMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_ForceReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemForceReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).ForceReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/ForceReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).ForceReceive(ctx, req.(*OrderItemForceReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_UpdateRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).UpdateRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/UpdateRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).UpdateRefund(ctx, req.(*UpdateRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_AdjustPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAdjustPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemControllerServer).AdjustPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitem.OrderItemController/AdjustPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemControllerServer).AdjustPayment(ctx, req.(*OrderItemAdjustPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemController_GetOrderItemExcelData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderItemExcelDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderItemControllerServer).GetOrderItemExcelData(m, &orderItemControllerGetOrderItemExcelDataServer{stream})
}

type OrderItemController_GetOrderItemExcelDataServer interface {
	Send(*OrderItem) error
	grpc.ServerStream
}

type orderItemControllerGetOrderItemExcelDataServer struct {
	grpc.ServerStream
}

func (x *orderItemControllerGetOrderItemExcelDataServer) Send(m *OrderItem) error {
	return x.ServerStream.SendMsg(m)
}

// OrderItemController_ServiceDesc is the grpc.ServiceDesc for OrderItemController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderitem.OrderItemController",
	HandlerType: (*OrderItemControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OrderItemController_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrderItemController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _OrderItemController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderItemController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _OrderItemController_Destroy_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _OrderItemController_ChangeStatus_Handler,
		},
		{
			MethodName: "SetTrackingInfo",
			Handler:    _OrderItemController_SetTrackingInfo_Handler,
		},
		{
			MethodName: "AddMemo",
			Handler:    _OrderItemController_AddMemo_Handler,
		},
		{
			MethodName: "DeleteMemo",
			Handler:    _OrderItemController_DeleteMemo_Handler,
		},
		{
			MethodName: "ForceReceive",
			Handler:    _OrderItemController_ForceReceive_Handler,
		},
		{
			MethodName: "UpdateRefund",
			Handler:    _OrderItemController_UpdateRefund_Handler,
		},
		{
			MethodName: "AdjustPayment",
			Handler:    _OrderItemController_AdjustPayment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderItemExcelData",
			Handler:       _OrderItemController_GetOrderItemExcelData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order_item.proto",
}
