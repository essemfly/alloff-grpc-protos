// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: alloff_size.proto

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlloffSizeClient is the client API for AlloffSize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlloffSizeClient interface {
	GetAlloffSize(ctx context.Context, in *GetAlloffSizeRequest, opts ...grpc.CallOption) (*AlloffSizeMessage, error)
	ListAlloffSize(ctx context.Context, in *ListAlloffSizeRequest, opts ...grpc.CallOption) (*ListAlloffSizeResponse, error)
	EditAlloffSize(ctx context.Context, in *EditAlloffSizeRequest, opts ...grpc.CallOption) (*AlloffSizeMessage, error)
	CreateAlloffSize(ctx context.Context, in *CreateAlloffSizeRequest, opts ...grpc.CallOption) (*AlloffSizeMessage, error)
}

type alloffSizeClient struct {
	cc grpc.ClientConnInterface
}

func NewAlloffSizeClient(cc grpc.ClientConnInterface) AlloffSizeClient {
	return &alloffSizeClient{cc}
}

func (c *alloffSizeClient) GetAlloffSize(ctx context.Context, in *GetAlloffSizeRequest, opts ...grpc.CallOption) (*AlloffSizeMessage, error) {
	out := new(AlloffSizeMessage)
	err := c.cc.Invoke(ctx, "/goalloff.AlloffSize/GetAlloffSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alloffSizeClient) ListAlloffSize(ctx context.Context, in *ListAlloffSizeRequest, opts ...grpc.CallOption) (*ListAlloffSizeResponse, error) {
	out := new(ListAlloffSizeResponse)
	err := c.cc.Invoke(ctx, "/goalloff.AlloffSize/ListAlloffSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alloffSizeClient) EditAlloffSize(ctx context.Context, in *EditAlloffSizeRequest, opts ...grpc.CallOption) (*AlloffSizeMessage, error) {
	out := new(AlloffSizeMessage)
	err := c.cc.Invoke(ctx, "/goalloff.AlloffSize/EditAlloffSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alloffSizeClient) CreateAlloffSize(ctx context.Context, in *CreateAlloffSizeRequest, opts ...grpc.CallOption) (*AlloffSizeMessage, error) {
	out := new(AlloffSizeMessage)
	err := c.cc.Invoke(ctx, "/goalloff.AlloffSize/CreateAlloffSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlloffSizeServer is the server API for AlloffSize service.
// All implementations must embed UnimplementedAlloffSizeServer
// for forward compatibility
type AlloffSizeServer interface {
	GetAlloffSize(context.Context, *GetAlloffSizeRequest) (*AlloffSizeMessage, error)
	ListAlloffSize(context.Context, *ListAlloffSizeRequest) (*ListAlloffSizeResponse, error)
	EditAlloffSize(context.Context, *EditAlloffSizeRequest) (*AlloffSizeMessage, error)
	CreateAlloffSize(context.Context, *CreateAlloffSizeRequest) (*AlloffSizeMessage, error)
	mustEmbedUnimplementedAlloffSizeServer()
}

// UnimplementedAlloffSizeServer must be embedded to have forward compatible implementations.
type UnimplementedAlloffSizeServer struct {
}

func (UnimplementedAlloffSizeServer) GetAlloffSize(context.Context, *GetAlloffSizeRequest) (*AlloffSizeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlloffSize not implemented")
}
func (UnimplementedAlloffSizeServer) ListAlloffSize(context.Context, *ListAlloffSizeRequest) (*ListAlloffSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlloffSize not implemented")
}
func (UnimplementedAlloffSizeServer) EditAlloffSize(context.Context, *EditAlloffSizeRequest) (*AlloffSizeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAlloffSize not implemented")
}
func (UnimplementedAlloffSizeServer) CreateAlloffSize(context.Context, *CreateAlloffSizeRequest) (*AlloffSizeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlloffSize not implemented")
}
func (UnimplementedAlloffSizeServer) mustEmbedUnimplementedAlloffSizeServer() {}

// UnsafeAlloffSizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlloffSizeServer will
// result in compilation errors.
type UnsafeAlloffSizeServer interface {
	mustEmbedUnimplementedAlloffSizeServer()
}

func RegisterAlloffSizeServer(s grpc.ServiceRegistrar, srv AlloffSizeServer) {
	s.RegisterService(&AlloffSize_ServiceDesc, srv)
}

func _AlloffSize_GetAlloffSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlloffSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlloffSizeServer).GetAlloffSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.AlloffSize/GetAlloffSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlloffSizeServer).GetAlloffSize(ctx, req.(*GetAlloffSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlloffSize_ListAlloffSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlloffSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlloffSizeServer).ListAlloffSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.AlloffSize/ListAlloffSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlloffSizeServer).ListAlloffSize(ctx, req.(*ListAlloffSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlloffSize_EditAlloffSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAlloffSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlloffSizeServer).EditAlloffSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.AlloffSize/EditAlloffSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlloffSizeServer).EditAlloffSize(ctx, req.(*EditAlloffSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlloffSize_CreateAlloffSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlloffSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlloffSizeServer).CreateAlloffSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goalloff.AlloffSize/CreateAlloffSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlloffSizeServer).CreateAlloffSize(ctx, req.(*CreateAlloffSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlloffSize_ServiceDesc is the grpc.ServiceDesc for AlloffSize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlloffSize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goalloff.AlloffSize",
	HandlerType: (*AlloffSizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlloffSize",
			Handler:    _AlloffSize_GetAlloffSize_Handler,
		},
		{
			MethodName: "ListAlloffSize",
			Handler:    _AlloffSize_ListAlloffSize_Handler,
		},
		{
			MethodName: "EditAlloffSize",
			Handler:    _AlloffSize_EditAlloffSize_Handler,
		},
		{
			MethodName: "CreateAlloffSize",
			Handler:    _AlloffSize_CreateAlloffSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alloff_size.proto",
}
