// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentControllerClient is the client API for PaymentController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentControllerClient interface {
	List(ctx context.Context, in *PaymentListRequest, opts ...grpc.CallOption) (PaymentController_ListClient, error)
	Create(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error)
	Retrieve(ctx context.Context, in *PaymentRetrieveRequest, opts ...grpc.CallOption) (*Payment, error)
	Update(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error)
	Destroy(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentControllerClient(cc grpc.ClientConnInterface) PaymentControllerClient {
	return &paymentControllerClient{cc}
}

func (c *paymentControllerClient) List(ctx context.Context, in *PaymentListRequest, opts ...grpc.CallOption) (PaymentController_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentController_ServiceDesc.Streams[0], "/payment_alloff.PaymentController/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentControllerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PaymentController_ListClient interface {
	Recv() (*Payment, error)
	grpc.ClientStream
}

type paymentControllerListClient struct {
	grpc.ClientStream
}

func (x *paymentControllerListClient) Recv() (*Payment, error) {
	m := new(Payment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *paymentControllerClient) Create(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/payment_alloff.PaymentController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentControllerClient) Retrieve(ctx context.Context, in *PaymentRetrieveRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/payment_alloff.PaymentController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentControllerClient) Update(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/payment_alloff.PaymentController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentControllerClient) Destroy(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment_alloff.PaymentController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentControllerServer is the server API for PaymentController service.
// All implementations must embed UnimplementedPaymentControllerServer
// for forward compatibility
type PaymentControllerServer interface {
	List(*PaymentListRequest, PaymentController_ListServer) error
	Create(context.Context, *Payment) (*Payment, error)
	Retrieve(context.Context, *PaymentRetrieveRequest) (*Payment, error)
	Update(context.Context, *Payment) (*Payment, error)
	Destroy(context.Context, *Payment) (*emptypb.Empty, error)
	mustEmbedUnimplementedPaymentControllerServer()
}

// UnimplementedPaymentControllerServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentControllerServer struct {
}

func (UnimplementedPaymentControllerServer) List(*PaymentListRequest, PaymentController_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPaymentControllerServer) Create(context.Context, *Payment) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPaymentControllerServer) Retrieve(context.Context, *PaymentRetrieveRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedPaymentControllerServer) Update(context.Context, *Payment) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPaymentControllerServer) Destroy(context.Context, *Payment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedPaymentControllerServer) mustEmbedUnimplementedPaymentControllerServer() {}

// UnsafePaymentControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentControllerServer will
// result in compilation errors.
type UnsafePaymentControllerServer interface {
	mustEmbedUnimplementedPaymentControllerServer()
}

func RegisterPaymentControllerServer(s grpc.ServiceRegistrar, srv PaymentControllerServer) {
	s.RegisterService(&PaymentController_ServiceDesc, srv)
}

func _PaymentController_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PaymentListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaymentControllerServer).List(m, &paymentControllerListServer{stream})
}

type PaymentController_ListServer interface {
	Send(*Payment) error
	grpc.ServerStream
}

type paymentControllerListServer struct {
	grpc.ServerStream
}

func (x *paymentControllerListServer) Send(m *Payment) error {
	return x.ServerStream.SendMsg(m)
}

func _PaymentController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_alloff.PaymentController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentControllerServer).Create(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_alloff.PaymentController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentControllerServer).Retrieve(ctx, req.(*PaymentRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_alloff.PaymentController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentControllerServer).Update(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_alloff.PaymentController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentControllerServer).Destroy(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentController_ServiceDesc is the grpc.ServiceDesc for PaymentController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment_alloff.PaymentController",
	HandlerType: (*PaymentControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PaymentController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _PaymentController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _PaymentController_Destroy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _PaymentController_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "payment.proto",
}
