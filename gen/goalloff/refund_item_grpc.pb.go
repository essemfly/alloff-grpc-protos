// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: refund_item.proto

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RefundItemControllerClient is the client API for RefundItemController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefundItemControllerClient interface {
	List(ctx context.Context, in *RefundItemListRequest, opts ...grpc.CallOption) (RefundItemController_ListClient, error)
	Create(ctx context.Context, in *RefundItem, opts ...grpc.CallOption) (*RefundItem, error)
	Retrieve(ctx context.Context, in *RefundItemRetrieveRequest, opts ...grpc.CallOption) (*RefundItem, error)
	Update(ctx context.Context, in *RefundItem, opts ...grpc.CallOption) (*RefundItem, error)
	Destroy(ctx context.Context, in *RefundItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type refundItemControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRefundItemControllerClient(cc grpc.ClientConnInterface) RefundItemControllerClient {
	return &refundItemControllerClient{cc}
}

func (c *refundItemControllerClient) List(ctx context.Context, in *RefundItemListRequest, opts ...grpc.CallOption) (RefundItemController_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RefundItemController_ServiceDesc.Streams[0], "/refunditem.RefundItemController/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &refundItemControllerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefundItemController_ListClient interface {
	Recv() (*RefundItem, error)
	grpc.ClientStream
}

type refundItemControllerListClient struct {
	grpc.ClientStream
}

func (x *refundItemControllerListClient) Recv() (*RefundItem, error) {
	m := new(RefundItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refundItemControllerClient) Create(ctx context.Context, in *RefundItem, opts ...grpc.CallOption) (*RefundItem, error) {
	out := new(RefundItem)
	err := c.cc.Invoke(ctx, "/refunditem.RefundItemController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundItemControllerClient) Retrieve(ctx context.Context, in *RefundItemRetrieveRequest, opts ...grpc.CallOption) (*RefundItem, error) {
	out := new(RefundItem)
	err := c.cc.Invoke(ctx, "/refunditem.RefundItemController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundItemControllerClient) Update(ctx context.Context, in *RefundItem, opts ...grpc.CallOption) (*RefundItem, error) {
	out := new(RefundItem)
	err := c.cc.Invoke(ctx, "/refunditem.RefundItemController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundItemControllerClient) Destroy(ctx context.Context, in *RefundItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/refunditem.RefundItemController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefundItemControllerServer is the server API for RefundItemController service.
// All implementations must embed UnimplementedRefundItemControllerServer
// for forward compatibility
type RefundItemControllerServer interface {
	List(*RefundItemListRequest, RefundItemController_ListServer) error
	Create(context.Context, *RefundItem) (*RefundItem, error)
	Retrieve(context.Context, *RefundItemRetrieveRequest) (*RefundItem, error)
	Update(context.Context, *RefundItem) (*RefundItem, error)
	Destroy(context.Context, *RefundItem) (*emptypb.Empty, error)
	mustEmbedUnimplementedRefundItemControllerServer()
}

// UnimplementedRefundItemControllerServer must be embedded to have forward compatible implementations.
type UnimplementedRefundItemControllerServer struct {
}

func (UnimplementedRefundItemControllerServer) List(*RefundItemListRequest, RefundItemController_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRefundItemControllerServer) Create(context.Context, *RefundItem) (*RefundItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRefundItemControllerServer) Retrieve(context.Context, *RefundItemRetrieveRequest) (*RefundItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedRefundItemControllerServer) Update(context.Context, *RefundItem) (*RefundItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRefundItemControllerServer) Destroy(context.Context, *RefundItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedRefundItemControllerServer) mustEmbedUnimplementedRefundItemControllerServer() {}

// UnsafeRefundItemControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefundItemControllerServer will
// result in compilation errors.
type UnsafeRefundItemControllerServer interface {
	mustEmbedUnimplementedRefundItemControllerServer()
}

func RegisterRefundItemControllerServer(s grpc.ServiceRegistrar, srv RefundItemControllerServer) {
	s.RegisterService(&RefundItemController_ServiceDesc, srv)
}

func _RefundItemController_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RefundItemListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefundItemControllerServer).List(m, &refundItemControllerListServer{stream})
}

type RefundItemController_ListServer interface {
	Send(*RefundItem) error
	grpc.ServerStream
}

type refundItemControllerListServer struct {
	grpc.ServerStream
}

func (x *refundItemControllerListServer) Send(m *RefundItem) error {
	return x.ServerStream.SendMsg(m)
}

func _RefundItemController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundItemControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunditem.RefundItemController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundItemControllerServer).Create(ctx, req.(*RefundItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundItemController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundItemRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundItemControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunditem.RefundItemController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundItemControllerServer).Retrieve(ctx, req.(*RefundItemRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundItemController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundItemControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunditem.RefundItemController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundItemControllerServer).Update(ctx, req.(*RefundItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundItemController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundItemControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunditem.RefundItemController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundItemControllerServer).Destroy(ctx, req.(*RefundItem))
	}
	return interceptor(ctx, in, info, handler)
}

// RefundItemController_ServiceDesc is the grpc.ServiceDesc for RefundItemController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefundItemController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "refunditem.RefundItemController",
	HandlerType: (*RefundItemControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RefundItemController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _RefundItemController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RefundItemController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _RefundItemController_Destroy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _RefundItemController_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "refund_item.proto",
}
