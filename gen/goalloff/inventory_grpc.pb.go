// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryControllerClient is the client API for InventoryController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryControllerClient interface {
	List(ctx context.Context, in *InventoryListRequest, opts ...grpc.CallOption) (*InventoryListResponse, error)
	Create(ctx context.Context, in *Inventory, opts ...grpc.CallOption) (*Inventory, error)
	Retrieve(ctx context.Context, in *InventoryRetrieveRequest, opts ...grpc.CallOption) (*Inventory, error)
	Update(ctx context.Context, in *Inventory, opts ...grpc.CallOption) (*Inventory, error)
	Destroy(ctx context.Context, in *InventoryRetrieveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inventoryControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryControllerClient(cc grpc.ClientConnInterface) InventoryControllerClient {
	return &inventoryControllerClient{cc}
}

func (c *inventoryControllerClient) List(ctx context.Context, in *InventoryListRequest, opts ...grpc.CallOption) (*InventoryListResponse, error) {
	out := new(InventoryListResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryController/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryControllerClient) Create(ctx context.Context, in *Inventory, opts ...grpc.CallOption) (*Inventory, error) {
	out := new(Inventory)
	err := c.cc.Invoke(ctx, "/inventory.InventoryController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryControllerClient) Retrieve(ctx context.Context, in *InventoryRetrieveRequest, opts ...grpc.CallOption) (*Inventory, error) {
	out := new(Inventory)
	err := c.cc.Invoke(ctx, "/inventory.InventoryController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryControllerClient) Update(ctx context.Context, in *Inventory, opts ...grpc.CallOption) (*Inventory, error) {
	out := new(Inventory)
	err := c.cc.Invoke(ctx, "/inventory.InventoryController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryControllerClient) Destroy(ctx context.Context, in *InventoryRetrieveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryControllerServer is the server API for InventoryController service.
// All implementations must embed UnimplementedInventoryControllerServer
// for forward compatibility
type InventoryControllerServer interface {
	List(context.Context, *InventoryListRequest) (*InventoryListResponse, error)
	Create(context.Context, *Inventory) (*Inventory, error)
	Retrieve(context.Context, *InventoryRetrieveRequest) (*Inventory, error)
	Update(context.Context, *Inventory) (*Inventory, error)
	Destroy(context.Context, *InventoryRetrieveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInventoryControllerServer()
}

// UnimplementedInventoryControllerServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryControllerServer struct {
}

func (UnimplementedInventoryControllerServer) List(context.Context, *InventoryListRequest) (*InventoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedInventoryControllerServer) Create(context.Context, *Inventory) (*Inventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInventoryControllerServer) Retrieve(context.Context, *InventoryRetrieveRequest) (*Inventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedInventoryControllerServer) Update(context.Context, *Inventory) (*Inventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInventoryControllerServer) Destroy(context.Context, *InventoryRetrieveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedInventoryControllerServer) mustEmbedUnimplementedInventoryControllerServer() {}

// UnsafeInventoryControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryControllerServer will
// result in compilation errors.
type UnsafeInventoryControllerServer interface {
	mustEmbedUnimplementedInventoryControllerServer()
}

func RegisterInventoryControllerServer(s grpc.ServiceRegistrar, srv InventoryControllerServer) {
	s.RegisterService(&InventoryController_ServiceDesc, srv)
}

func _InventoryController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryController/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryControllerServer).List(ctx, req.(*InventoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inventory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryControllerServer).Create(ctx, req.(*Inventory))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryControllerServer).Retrieve(ctx, req.(*InventoryRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inventory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryControllerServer).Update(ctx, req.(*Inventory))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryControllerServer).Destroy(ctx, req.(*InventoryRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryController_ServiceDesc is the grpc.ServiceDesc for InventoryController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryController",
	HandlerType: (*InventoryControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _InventoryController_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _InventoryController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _InventoryController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InventoryController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _InventoryController_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
