// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: received_item.proto

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceivedItemControllerClient is the client API for ReceivedItemController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceivedItemControllerClient interface {
	List(ctx context.Context, in *ReceivedItemListRequest, opts ...grpc.CallOption) (*ReceivedItemListResponse, error)
	Create(ctx context.Context, in *ReceivedItem, opts ...grpc.CallOption) (*ReceivedItem, error)
	Retrieve(ctx context.Context, in *ReceivedItemRetrieveRequest, opts ...grpc.CallOption) (*ReceivedItem, error)
	Update(ctx context.Context, in *ReceivedItem, opts ...grpc.CallOption) (*ReceivedItem, error)
	Destroy(ctx context.Context, in *ReceivedItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Receive(ctx context.Context, in *ReceivedItemReceiveRevertRequest, opts ...grpc.CallOption) (*ReceivedItem, error)
	Cancel(ctx context.Context, in *ReceivedItemReceiveRevertRequest, opts ...grpc.CallOption) (*ReceivedItem, error)
	Revert(ctx context.Context, in *ReceivedItemReceiveRevertRequest, opts ...grpc.CallOption) (*ReceivedItem, error)
}

type receivedItemControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewReceivedItemControllerClient(cc grpc.ClientConnInterface) ReceivedItemControllerClient {
	return &receivedItemControllerClient{cc}
}

func (c *receivedItemControllerClient) List(ctx context.Context, in *ReceivedItemListRequest, opts ...grpc.CallOption) (*ReceivedItemListResponse, error) {
	out := new(ReceivedItemListResponse)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Create(ctx context.Context, in *ReceivedItem, opts ...grpc.CallOption) (*ReceivedItem, error) {
	out := new(ReceivedItem)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Retrieve(ctx context.Context, in *ReceivedItemRetrieveRequest, opts ...grpc.CallOption) (*ReceivedItem, error) {
	out := new(ReceivedItem)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Update(ctx context.Context, in *ReceivedItem, opts ...grpc.CallOption) (*ReceivedItem, error) {
	out := new(ReceivedItem)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Destroy(ctx context.Context, in *ReceivedItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Receive(ctx context.Context, in *ReceivedItemReceiveRevertRequest, opts ...grpc.CallOption) (*ReceivedItem, error) {
	out := new(ReceivedItem)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Cancel(ctx context.Context, in *ReceivedItemReceiveRevertRequest, opts ...grpc.CallOption) (*ReceivedItem, error) {
	out := new(ReceivedItem)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receivedItemControllerClient) Revert(ctx context.Context, in *ReceivedItemReceiveRevertRequest, opts ...grpc.CallOption) (*ReceivedItem, error) {
	out := new(ReceivedItem)
	err := c.cc.Invoke(ctx, "/received_item.ReceivedItemController/Revert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceivedItemControllerServer is the server API for ReceivedItemController service.
// All implementations must embed UnimplementedReceivedItemControllerServer
// for forward compatibility
type ReceivedItemControllerServer interface {
	List(context.Context, *ReceivedItemListRequest) (*ReceivedItemListResponse, error)
	Create(context.Context, *ReceivedItem) (*ReceivedItem, error)
	Retrieve(context.Context, *ReceivedItemRetrieveRequest) (*ReceivedItem, error)
	Update(context.Context, *ReceivedItem) (*ReceivedItem, error)
	Destroy(context.Context, *ReceivedItem) (*emptypb.Empty, error)
	Receive(context.Context, *ReceivedItemReceiveRevertRequest) (*ReceivedItem, error)
	Cancel(context.Context, *ReceivedItemReceiveRevertRequest) (*ReceivedItem, error)
	Revert(context.Context, *ReceivedItemReceiveRevertRequest) (*ReceivedItem, error)
	mustEmbedUnimplementedReceivedItemControllerServer()
}

// UnimplementedReceivedItemControllerServer must be embedded to have forward compatible implementations.
type UnimplementedReceivedItemControllerServer struct {
}

func (UnimplementedReceivedItemControllerServer) List(context.Context, *ReceivedItemListRequest) (*ReceivedItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReceivedItemControllerServer) Create(context.Context, *ReceivedItem) (*ReceivedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReceivedItemControllerServer) Retrieve(context.Context, *ReceivedItemRetrieveRequest) (*ReceivedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedReceivedItemControllerServer) Update(context.Context, *ReceivedItem) (*ReceivedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReceivedItemControllerServer) Destroy(context.Context, *ReceivedItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedReceivedItemControllerServer) Receive(context.Context, *ReceivedItemReceiveRevertRequest) (*ReceivedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedReceivedItemControllerServer) Cancel(context.Context, *ReceivedItemReceiveRevertRequest) (*ReceivedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedReceivedItemControllerServer) Revert(context.Context, *ReceivedItemReceiveRevertRequest) (*ReceivedItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revert not implemented")
}
func (UnimplementedReceivedItemControllerServer) mustEmbedUnimplementedReceivedItemControllerServer() {
}

// UnsafeReceivedItemControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceivedItemControllerServer will
// result in compilation errors.
type UnsafeReceivedItemControllerServer interface {
	mustEmbedUnimplementedReceivedItemControllerServer()
}

func RegisterReceivedItemControllerServer(s grpc.ServiceRegistrar, srv ReceivedItemControllerServer) {
	s.RegisterService(&ReceivedItemController_ServiceDesc, srv)
}

func _ReceivedItemController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).List(ctx, req.(*ReceivedItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Create(ctx, req.(*ReceivedItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Retrieve(ctx, req.(*ReceivedItemRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Update(ctx, req.(*ReceivedItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Destroy(ctx, req.(*ReceivedItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemReceiveRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Receive(ctx, req.(*ReceivedItemReceiveRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemReceiveRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Cancel(ctx, req.(*ReceivedItemReceiveRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceivedItemController_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedItemReceiveRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceivedItemControllerServer).Revert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/received_item.ReceivedItemController/Revert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceivedItemControllerServer).Revert(ctx, req.(*ReceivedItemReceiveRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceivedItemController_ServiceDesc is the grpc.ServiceDesc for ReceivedItemController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceivedItemController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "received_item.ReceivedItemController",
	HandlerType: (*ReceivedItemControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ReceivedItemController_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ReceivedItemController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ReceivedItemController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReceivedItemController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ReceivedItemController_Destroy_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _ReceivedItemController_Receive_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ReceivedItemController_Cancel_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _ReceivedItemController_Revert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "received_item.proto",
}
