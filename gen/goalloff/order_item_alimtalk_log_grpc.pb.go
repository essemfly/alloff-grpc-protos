// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order_item_alimtalk_log.proto

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderItemAlimtalkLogControllerClient is the client API for OrderItemAlimtalkLogController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemAlimtalkLogControllerClient interface {
	List(ctx context.Context, in *OrderItemAlimtalkLogListRequest, opts ...grpc.CallOption) (OrderItemAlimtalkLogController_ListClient, error)
	Create(ctx context.Context, in *OrderItemAlimtalkLog, opts ...grpc.CallOption) (*OrderItemAlimtalkLog, error)
	Retrieve(ctx context.Context, in *OrderItemAlimtalkLogRetrieveRequest, opts ...grpc.CallOption) (*OrderItemAlimtalkLog, error)
	Update(ctx context.Context, in *OrderItemAlimtalkLog, opts ...grpc.CallOption) (*OrderItemAlimtalkLog, error)
	Destroy(ctx context.Context, in *OrderItemAlimtalkLog, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderItemAlimtalkLogControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemAlimtalkLogControllerClient(cc grpc.ClientConnInterface) OrderItemAlimtalkLogControllerClient {
	return &orderItemAlimtalkLogControllerClient{cc}
}

func (c *orderItemAlimtalkLogControllerClient) List(ctx context.Context, in *OrderItemAlimtalkLogListRequest, opts ...grpc.CallOption) (OrderItemAlimtalkLogController_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderItemAlimtalkLogController_ServiceDesc.Streams[0], "/orderitemalimtalklog.OrderItemAlimtalkLogController/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderItemAlimtalkLogControllerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderItemAlimtalkLogController_ListClient interface {
	Recv() (*OrderItemAlimtalkLog, error)
	grpc.ClientStream
}

type orderItemAlimtalkLogControllerListClient struct {
	grpc.ClientStream
}

func (x *orderItemAlimtalkLogControllerListClient) Recv() (*OrderItemAlimtalkLog, error) {
	m := new(OrderItemAlimtalkLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderItemAlimtalkLogControllerClient) Create(ctx context.Context, in *OrderItemAlimtalkLog, opts ...grpc.CallOption) (*OrderItemAlimtalkLog, error) {
	out := new(OrderItemAlimtalkLog)
	err := c.cc.Invoke(ctx, "/orderitemalimtalklog.OrderItemAlimtalkLogController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemAlimtalkLogControllerClient) Retrieve(ctx context.Context, in *OrderItemAlimtalkLogRetrieveRequest, opts ...grpc.CallOption) (*OrderItemAlimtalkLog, error) {
	out := new(OrderItemAlimtalkLog)
	err := c.cc.Invoke(ctx, "/orderitemalimtalklog.OrderItemAlimtalkLogController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemAlimtalkLogControllerClient) Update(ctx context.Context, in *OrderItemAlimtalkLog, opts ...grpc.CallOption) (*OrderItemAlimtalkLog, error) {
	out := new(OrderItemAlimtalkLog)
	err := c.cc.Invoke(ctx, "/orderitemalimtalklog.OrderItemAlimtalkLogController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemAlimtalkLogControllerClient) Destroy(ctx context.Context, in *OrderItemAlimtalkLog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/orderitemalimtalklog.OrderItemAlimtalkLogController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemAlimtalkLogControllerServer is the server API for OrderItemAlimtalkLogController service.
// All implementations must embed UnimplementedOrderItemAlimtalkLogControllerServer
// for forward compatibility
type OrderItemAlimtalkLogControllerServer interface {
	List(*OrderItemAlimtalkLogListRequest, OrderItemAlimtalkLogController_ListServer) error
	Create(context.Context, *OrderItemAlimtalkLog) (*OrderItemAlimtalkLog, error)
	Retrieve(context.Context, *OrderItemAlimtalkLogRetrieveRequest) (*OrderItemAlimtalkLog, error)
	Update(context.Context, *OrderItemAlimtalkLog) (*OrderItemAlimtalkLog, error)
	Destroy(context.Context, *OrderItemAlimtalkLog) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderItemAlimtalkLogControllerServer()
}

// UnimplementedOrderItemAlimtalkLogControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemAlimtalkLogControllerServer struct {
}

func (UnimplementedOrderItemAlimtalkLogControllerServer) List(*OrderItemAlimtalkLogListRequest, OrderItemAlimtalkLogController_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrderItemAlimtalkLogControllerServer) Create(context.Context, *OrderItemAlimtalkLog) (*OrderItemAlimtalkLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderItemAlimtalkLogControllerServer) Retrieve(context.Context, *OrderItemAlimtalkLogRetrieveRequest) (*OrderItemAlimtalkLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedOrderItemAlimtalkLogControllerServer) Update(context.Context, *OrderItemAlimtalkLog) (*OrderItemAlimtalkLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderItemAlimtalkLogControllerServer) Destroy(context.Context, *OrderItemAlimtalkLog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedOrderItemAlimtalkLogControllerServer) mustEmbedUnimplementedOrderItemAlimtalkLogControllerServer() {
}

// UnsafeOrderItemAlimtalkLogControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemAlimtalkLogControllerServer will
// result in compilation errors.
type UnsafeOrderItemAlimtalkLogControllerServer interface {
	mustEmbedUnimplementedOrderItemAlimtalkLogControllerServer()
}

func RegisterOrderItemAlimtalkLogControllerServer(s grpc.ServiceRegistrar, srv OrderItemAlimtalkLogControllerServer) {
	s.RegisterService(&OrderItemAlimtalkLogController_ServiceDesc, srv)
}

func _OrderItemAlimtalkLogController_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderItemAlimtalkLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderItemAlimtalkLogControllerServer).List(m, &orderItemAlimtalkLogControllerListServer{stream})
}

type OrderItemAlimtalkLogController_ListServer interface {
	Send(*OrderItemAlimtalkLog) error
	grpc.ServerStream
}

type orderItemAlimtalkLogControllerListServer struct {
	grpc.ServerStream
}

func (x *orderItemAlimtalkLogControllerListServer) Send(m *OrderItemAlimtalkLog) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderItemAlimtalkLogController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAlimtalkLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemAlimtalkLogControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemalimtalklog.OrderItemAlimtalkLogController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemAlimtalkLogControllerServer).Create(ctx, req.(*OrderItemAlimtalkLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemAlimtalkLogController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAlimtalkLogRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemAlimtalkLogControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemalimtalklog.OrderItemAlimtalkLogController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemAlimtalkLogControllerServer).Retrieve(ctx, req.(*OrderItemAlimtalkLogRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemAlimtalkLogController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAlimtalkLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemAlimtalkLogControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemalimtalklog.OrderItemAlimtalkLogController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemAlimtalkLogControllerServer).Update(ctx, req.(*OrderItemAlimtalkLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemAlimtalkLogController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemAlimtalkLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemAlimtalkLogControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderitemalimtalklog.OrderItemAlimtalkLogController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemAlimtalkLogControllerServer).Destroy(ctx, req.(*OrderItemAlimtalkLog))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemAlimtalkLogController_ServiceDesc is the grpc.ServiceDesc for OrderItemAlimtalkLogController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemAlimtalkLogController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderitemalimtalklog.OrderItemAlimtalkLogController",
	HandlerType: (*OrderItemAlimtalkLogControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderItemAlimtalkLogController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _OrderItemAlimtalkLogController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderItemAlimtalkLogController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _OrderItemAlimtalkLogController_Destroy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _OrderItemAlimtalkLogController_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order_item_alimtalk_log.proto",
}
