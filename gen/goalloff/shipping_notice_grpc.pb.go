// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goalloff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingNoticeControllerClient is the client API for ShippingNoticeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingNoticeControllerClient interface {
	List(ctx context.Context, in *ShippingNoticeListRequest, opts ...grpc.CallOption) (*ShippingNoticeListResponse, error)
	Create(ctx context.Context, in *ShippingNotice, opts ...grpc.CallOption) (*ShippingNotice, error)
	Retrieve(ctx context.Context, in *ShippingNoticeRetrieveRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
	Update(ctx context.Context, in *ShippingNotice, opts ...grpc.CallOption) (*ShippingNotice, error)
	Destroy(ctx context.Context, in *ShippingNotice, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveItem(ctx context.Context, in *ShippingNoticeRemoveItemRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
	MoveItem(ctx context.Context, in *ShippingNoticeMoveItemRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
	LockAndPackage(ctx context.Context, in *ShippingNoticeRetrieveRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
	RecordShippingTemplate(ctx context.Context, in *RecordShippingTemplateRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
	SubmitTrackingExcel(ctx context.Context, in *SubmitTrackingExcelRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
	GetCandidates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ShippingNoticeController_GetCandidatesClient, error)
	SubmitCandidates(ctx context.Context, in *ShippingNoticeCandidateSubmitRequest, opts ...grpc.CallOption) (*ShippingNotice, error)
}

type shippingNoticeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingNoticeControllerClient(cc grpc.ClientConnInterface) ShippingNoticeControllerClient {
	return &shippingNoticeControllerClient{cc}
}

func (c *shippingNoticeControllerClient) List(ctx context.Context, in *ShippingNoticeListRequest, opts ...grpc.CallOption) (*ShippingNoticeListResponse, error) {
	out := new(ShippingNoticeListResponse)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) Create(ctx context.Context, in *ShippingNotice, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) Retrieve(ctx context.Context, in *ShippingNoticeRetrieveRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) Update(ctx context.Context, in *ShippingNotice, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) Destroy(ctx context.Context, in *ShippingNotice, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) RemoveItem(ctx context.Context, in *ShippingNoticeRemoveItemRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/RemoveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) MoveItem(ctx context.Context, in *ShippingNoticeMoveItemRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/MoveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) LockAndPackage(ctx context.Context, in *ShippingNoticeRetrieveRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/LockAndPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) RecordShippingTemplate(ctx context.Context, in *RecordShippingTemplateRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/RecordShippingTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) SubmitTrackingExcel(ctx context.Context, in *SubmitTrackingExcelRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/SubmitTrackingExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingNoticeControllerClient) GetCandidates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ShippingNoticeController_GetCandidatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShippingNoticeController_ServiceDesc.Streams[0], "/shipping_notice.ShippingNoticeController/GetCandidates", opts...)
	if err != nil {
		return nil, err
	}
	x := &shippingNoticeControllerGetCandidatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShippingNoticeController_GetCandidatesClient interface {
	Recv() (*ShippingCandidate, error)
	grpc.ClientStream
}

type shippingNoticeControllerGetCandidatesClient struct {
	grpc.ClientStream
}

func (x *shippingNoticeControllerGetCandidatesClient) Recv() (*ShippingCandidate, error) {
	m := new(ShippingCandidate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shippingNoticeControllerClient) SubmitCandidates(ctx context.Context, in *ShippingNoticeCandidateSubmitRequest, opts ...grpc.CallOption) (*ShippingNotice, error) {
	out := new(ShippingNotice)
	err := c.cc.Invoke(ctx, "/shipping_notice.ShippingNoticeController/SubmitCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingNoticeControllerServer is the server API for ShippingNoticeController service.
// All implementations must embed UnimplementedShippingNoticeControllerServer
// for forward compatibility
type ShippingNoticeControllerServer interface {
	List(context.Context, *ShippingNoticeListRequest) (*ShippingNoticeListResponse, error)
	Create(context.Context, *ShippingNotice) (*ShippingNotice, error)
	Retrieve(context.Context, *ShippingNoticeRetrieveRequest) (*ShippingNotice, error)
	Update(context.Context, *ShippingNotice) (*ShippingNotice, error)
	Destroy(context.Context, *ShippingNotice) (*emptypb.Empty, error)
	RemoveItem(context.Context, *ShippingNoticeRemoveItemRequest) (*ShippingNotice, error)
	MoveItem(context.Context, *ShippingNoticeMoveItemRequest) (*ShippingNotice, error)
	LockAndPackage(context.Context, *ShippingNoticeRetrieveRequest) (*ShippingNotice, error)
	RecordShippingTemplate(context.Context, *RecordShippingTemplateRequest) (*ShippingNotice, error)
	SubmitTrackingExcel(context.Context, *SubmitTrackingExcelRequest) (*ShippingNotice, error)
	GetCandidates(*emptypb.Empty, ShippingNoticeController_GetCandidatesServer) error
	SubmitCandidates(context.Context, *ShippingNoticeCandidateSubmitRequest) (*ShippingNotice, error)
	mustEmbedUnimplementedShippingNoticeControllerServer()
}

// UnimplementedShippingNoticeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedShippingNoticeControllerServer struct {
}

func (UnimplementedShippingNoticeControllerServer) List(context.Context, *ShippingNoticeListRequest) (*ShippingNoticeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedShippingNoticeControllerServer) Create(context.Context, *ShippingNotice) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedShippingNoticeControllerServer) Retrieve(context.Context, *ShippingNoticeRetrieveRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedShippingNoticeControllerServer) Update(context.Context, *ShippingNotice) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedShippingNoticeControllerServer) Destroy(context.Context, *ShippingNotice) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedShippingNoticeControllerServer) RemoveItem(context.Context, *ShippingNoticeRemoveItemRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedShippingNoticeControllerServer) MoveItem(context.Context, *ShippingNoticeMoveItemRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveItem not implemented")
}
func (UnimplementedShippingNoticeControllerServer) LockAndPackage(context.Context, *ShippingNoticeRetrieveRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAndPackage not implemented")
}
func (UnimplementedShippingNoticeControllerServer) RecordShippingTemplate(context.Context, *RecordShippingTemplateRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordShippingTemplate not implemented")
}
func (UnimplementedShippingNoticeControllerServer) SubmitTrackingExcel(context.Context, *SubmitTrackingExcelRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTrackingExcel not implemented")
}
func (UnimplementedShippingNoticeControllerServer) GetCandidates(*emptypb.Empty, ShippingNoticeController_GetCandidatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCandidates not implemented")
}
func (UnimplementedShippingNoticeControllerServer) SubmitCandidates(context.Context, *ShippingNoticeCandidateSubmitRequest) (*ShippingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCandidates not implemented")
}
func (UnimplementedShippingNoticeControllerServer) mustEmbedUnimplementedShippingNoticeControllerServer() {
}

// UnsafeShippingNoticeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingNoticeControllerServer will
// result in compilation errors.
type UnsafeShippingNoticeControllerServer interface {
	mustEmbedUnimplementedShippingNoticeControllerServer()
}

func RegisterShippingNoticeControllerServer(s grpc.ServiceRegistrar, srv ShippingNoticeControllerServer) {
	s.RegisterService(&ShippingNoticeController_ServiceDesc, srv)
}

func _ShippingNoticeController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).List(ctx, req.(*ShippingNoticeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNotice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).Create(ctx, req.(*ShippingNotice))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).Retrieve(ctx, req.(*ShippingNoticeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNotice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).Update(ctx, req.(*ShippingNotice))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNotice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).Destroy(ctx, req.(*ShippingNotice))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeRemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/RemoveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).RemoveItem(ctx, req.(*ShippingNoticeRemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_MoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeMoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).MoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/MoveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).MoveItem(ctx, req.(*ShippingNoticeMoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_LockAndPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).LockAndPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/LockAndPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).LockAndPackage(ctx, req.(*ShippingNoticeRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_RecordShippingTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordShippingTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).RecordShippingTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/RecordShippingTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).RecordShippingTemplate(ctx, req.(*RecordShippingTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_SubmitTrackingExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTrackingExcelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).SubmitTrackingExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/SubmitTrackingExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).SubmitTrackingExcel(ctx, req.(*SubmitTrackingExcelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingNoticeController_GetCandidates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShippingNoticeControllerServer).GetCandidates(m, &shippingNoticeControllerGetCandidatesServer{stream})
}

type ShippingNoticeController_GetCandidatesServer interface {
	Send(*ShippingCandidate) error
	grpc.ServerStream
}

type shippingNoticeControllerGetCandidatesServer struct {
	grpc.ServerStream
}

func (x *shippingNoticeControllerGetCandidatesServer) Send(m *ShippingCandidate) error {
	return x.ServerStream.SendMsg(m)
}

func _ShippingNoticeController_SubmitCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingNoticeCandidateSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingNoticeControllerServer).SubmitCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipping_notice.ShippingNoticeController/SubmitCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingNoticeControllerServer).SubmitCandidates(ctx, req.(*ShippingNoticeCandidateSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingNoticeController_ServiceDesc is the grpc.ServiceDesc for ShippingNoticeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingNoticeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipping_notice.ShippingNoticeController",
	HandlerType: (*ShippingNoticeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ShippingNoticeController_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ShippingNoticeController_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ShippingNoticeController_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShippingNoticeController_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ShippingNoticeController_Destroy_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _ShippingNoticeController_RemoveItem_Handler,
		},
		{
			MethodName: "MoveItem",
			Handler:    _ShippingNoticeController_MoveItem_Handler,
		},
		{
			MethodName: "LockAndPackage",
			Handler:    _ShippingNoticeController_LockAndPackage_Handler,
		},
		{
			MethodName: "RecordShippingTemplate",
			Handler:    _ShippingNoticeController_RecordShippingTemplate_Handler,
		},
		{
			MethodName: "SubmitTrackingExcel",
			Handler:    _ShippingNoticeController_SubmitTrackingExcel_Handler,
		},
		{
			MethodName: "SubmitCandidates",
			Handler:    _ShippingNoticeController_SubmitCandidates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCandidates",
			Handler:       _ShippingNoticeController_GetCandidates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shipping_notice.proto",
}
